/**
 * win32-def
 * win32 definitions for node-ffi
 *
 * @version 26.1.1
 * @author waiting
 * @license MIT
 * @link https://waitingsong.github.io/node-win32-api
 */

'use strict';

/* eslint-disable no-bitwise */
/**
 * @link https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-showwindow
 */
exports.CmdShow = void 0;
(function (CmdShow) {
    // Hides the window and activates another window.
    CmdShow[CmdShow["SW_HIDE"] = 0] = "SW_HIDE";
    // Activates and displays a window. If the window is minimized or maximized,
    // the system restores it to its original size and position.
    // An application should specify this flag when displaying the window for the first time.
    CmdShow[CmdShow["SW_SHOWNORMAL"] = 1] = "SW_SHOWNORMAL";
    // Activates the window and displays it as a minimized window.
    CmdShow[CmdShow["SW_SHOWMINIMIZED"] = 2] = "SW_SHOWMINIMIZED";
    // Activates the window and displays it as a maximized window.
    CmdShow[CmdShow["SW_SHOWMAXIMIZED"] = 3] = "SW_SHOWMAXIMIZED";
    // Maximizes the specified window.
    CmdShow[CmdShow["SW_MAXIMIZE"] = 3] = "SW_MAXIMIZE";
    // Displays a window in its most recent size and position.
    // This value is similar to SW_SHOWNORMAL, except that the window is not activated.
    CmdShow[CmdShow["SW_SHOWNOACTIVATE"] = 4] = "SW_SHOWNOACTIVATE";
    // Activates the window and displays it in its current size and position.
    CmdShow[CmdShow["SW_SHOW"] = 5] = "SW_SHOW";
    // Minimizes the specified window and activates the next top-level window in the Z order.
    CmdShow[CmdShow["SW_MINIMIZE"] = 6] = "SW_MINIMIZE";
    // Displays the window as a minimized window.
    // This value is similar to SW_SHOWMINIMIZED, except the window is not activated.
    CmdShow[CmdShow["SW_SHOWMINNOACTIVE"] = 7] = "SW_SHOWMINNOACTIVE";
    // Displays the window in its current size and position.
    // This value is similar to SW_SHOW, except that the window is not activated.
    CmdShow[CmdShow["SW_SHOWNA"] = 8] = "SW_SHOWNA";
    // Activates and displays the window.
    // If the window is minimized or maximized,
    // the system restores it to its original size and position.
    CmdShow[CmdShow["SW_RESTORE"] = 9] = "SW_RESTORE";
    // Sets the show state based on the SW_ value specified in the STARTUPINFO structure
    // passed to the CreateProcess function by the program that started the application.
    CmdShow[CmdShow["SW_SHOWDEFAULT"] = 10] = "SW_SHOWDEFAULT";
    // Minimizes a window, even if the thread that owns the window is not responding.
    // This flag should only be used when minimizing windows from a different thread.
    CmdShow[CmdShow["SW_FORCEMINIMIZE"] = 11] = "SW_FORCEMINIMIZE";
})(exports.CmdShow || (exports.CmdShow = {}));
// https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowpos
exports.CmdSetPos = void 0;
(function (CmdSetPos) {
    // values for hWndInsertAfter
    CmdSetPos[CmdSetPos["HWND_BOTTOM"] = 1] = "HWND_BOTTOM";
    CmdSetPos[CmdSetPos["HWND_NOTOPMOST"] = -2] = "HWND_NOTOPMOST";
    CmdSetPos[CmdSetPos["HWND_TOP"] = 0] = "HWND_TOP";
    CmdSetPos[CmdSetPos["HWND_TOPMOST"] = -1] = "HWND_TOPMOST";
    // values for uFlags
    CmdSetPos[CmdSetPos["SWP_ASYNCWINDOWPOS"] = 16384] = "SWP_ASYNCWINDOWPOS";
    CmdSetPos[CmdSetPos["SWP_DEFERERASE"] = 8192] = "SWP_DEFERERASE";
    CmdSetPos[CmdSetPos["SWP_DRAWFRAME"] = 32] = "SWP_DRAWFRAME";
    CmdSetPos[CmdSetPos["SWP_FRAMECHANGED"] = 32] = "SWP_FRAMECHANGED";
    CmdSetPos[CmdSetPos["SWP_HIDEWINDOW"] = 128] = "SWP_HIDEWINDOW";
    CmdSetPos[CmdSetPos["SWP_NOACTIVATE"] = 16] = "SWP_NOACTIVATE";
    CmdSetPos[CmdSetPos["SWP_NOCOPYBITS"] = 256] = "SWP_NOCOPYBITS";
    CmdSetPos[CmdSetPos["SWP_NOMOVE"] = 2] = "SWP_NOMOVE";
    CmdSetPos[CmdSetPos["SWP_NOOWNERZORDER"] = 512] = "SWP_NOOWNERZORDER";
    CmdSetPos[CmdSetPos["SWP_NOREDRAW"] = 8] = "SWP_NOREDRAW";
    CmdSetPos[CmdSetPos["SWP_NOREPOSITION"] = 512] = "SWP_NOREPOSITION";
    CmdSetPos[CmdSetPos["SWP_NOSENDCHANGING"] = 1024] = "SWP_NOSENDCHANGING";
    CmdSetPos[CmdSetPos["SWP_NOSIZE"] = 1] = "SWP_NOSIZE";
    CmdSetPos[CmdSetPos["SWP_NOZORDER"] = 4] = "SWP_NOZORDER";
    CmdSetPos[CmdSetPos["SWP_SHOWWINDOW"] = 64] = "SWP_SHOWWINDOW";
})(exports.CmdSetPos || (exports.CmdSetPos = {}));
/* --------- Window Styles ---------------- */
// https://msdn.microsoft.com/en-us/library/windows/desktop/ms632600(v=vs.85).aspx
const WS_BORDER = 0x00800000;
const WS_CAPTION = 0x00C00000;
const WS_CHILD = 0x40000000;
const WS_CLIPCHILDREN = 0x02000000;
const WS_CLIPSIBLINGS = 0x04000000;
const WS_DISABLED = 0x08000000;
const WS_DLGFRAME = 0x00400000;
const WS_GROUP = 0x00020000;
const WS_HSCROLL = 0x00100000;
const WS_ICONIC = 0x20000000;
const WS_MAXIMIZE = 0x01000000;
const WS_MAXIMIZEBOX = 0x00010000;
const WS_MINIMIZE = 0x20000000;
const WS_MINIMIZEBOX = 0x00020000;
const WS_OVERLAPPED = 0x00000000;
const WS_POPUP = 0x80000000; // The windows is a pop-up window
const WS_SIZEBOX = 0x00040000;
const WS_SYSMENU = 0x00080000; // The window has a window menu on its title bar.
const WS_TABSTOP = 0x00010000;
const WS_THICKFRAME = 0x00040000;
const WS_TILED = 0x00000000;
const WS_VISIBLE = 0x10000000;
const WS_VSCROLL = 0x00200000;
const WS_OVERLAPPEDWINDOW = WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU
    | WS_THICKFRAME | WS_MINIMIZEBOX | WS_MAXIMIZEBOX;
const WS_POPUPWINDOW = WS_POPUP | WS_BORDER | WS_SYSMENU;
const WS_TILEDWINDOW = WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU
    | WS_THICKFRAME | WS_MINIMIZEBOX | WS_MAXIMIZEBOX;
/* --------- Extended Window Styles ---------------- */
// https://docs.microsoft.com/en-us/windows/win32/winmsg/extended-window-styles
// https://msdn.microsoft.com/en-us/library/windows/desktop/ff700543(v=vs.85).aspx
const WS_EX_ACCEPTFILES = 0x00000010;
const WS_EX_APPWINDOW = 0x00040000;
const WS_EX_CLIENTEDGE = 0x00000200;
const WS_EX_COMPOSITED = 0x02000000;
const WS_EX_CONTEXTHELP = 0x00000400;
const WS_EX_CONTROLPARENT = 0x00010000;
const WS_EX_DLGMODALFRAME = 0x00000001;
const WS_EX_LAYERED = 0x00080000;
const WS_EX_LAYOUTRTL = 0x00400000;
const WS_EX_LEFT = 0x00000000;
const WS_EX_LEFTSCROLLBAR = 0x00004000;
const WS_EX_LTRREADING = 0x00000000;
const WS_EX_MDICHILD = 0x00000040;
const WS_EX_NOACTIVATE = 0x08000000;
const WS_EX_NOINHERITLAYOUT = 0x00100000;
const WS_EX_NOPARENTNOTIFY = 0x00000004;
const WS_EX_NOREDIRECTIONBITMAP = 0x00200000;
const WS_EX_RIGHT = 0x00001000;
const WS_EX_RIGHTSCROLLBAR = 0x00000000;
const WS_EX_RTLREADING = 0x00002000;
const WS_EX_STATICEDGE = 0x00020000;
const WS_EX_TOOLWINDOW = 0x00000080;
const WS_EX_TOPMOST = 0x00000008;
const WS_EX_TRANSPARENT = 0x00000020;
const WS_EX_WINDOWEDGE = 0x00000100;
const WS_EX_OVERLAPPEDWINDOW = WS_EX_WINDOWEDGE | WS_EX_CLIENTEDGE;
const WS_EX_PALETTEWINDOW = WS_EX_WINDOWEDGE | WS_EX_TOOLWINDOW | WS_EX_TOPMOST;
const PM_NOREMOVE = 0x0000;
const PM_REMOVE = 0x0001;
const PM_NOYIELD = 0x0002;
const CW_USEDEFAULT = 1 << 31;

/**
 * Virtual-Key Codes
 *
 * @description The following table shows the symbolic constant names, hexadecimal values,
 * and mouse or keyboard equivalents for the virtual-key codes used by the system.
 * The codes are listed in numeric order.
 * @link https://docs.microsoft.com/zh-cn/windows/win32/inputdev/virtual-key-codes?redirectedfrom=MSDN
 * @link https://docs.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes?redirectedfrom=MSDN
 */
exports.VirtualKey = void 0;
(function (VirtualKey) {
    /** Left mouse button */
    VirtualKey[VirtualKey["VK_LBUTTON"] = 1] = "VK_LBUTTON";
    /** Right mouse button */
    VirtualKey[VirtualKey["VK_RBUTTON"] = 2] = "VK_RBUTTON";
    /** Control-break processing */
    VirtualKey[VirtualKey["VK_CANCEL"] = 3] = "VK_CANCEL";
    /** Middle mouse button(three - button mouse) */
    VirtualKey[VirtualKey["VK_MBUTTON"] = 4] = "VK_MBUTTON";
    /** X1 mouse button */
    VirtualKey[VirtualKey["VK_XBUTTON1"] = 5] = "VK_XBUTTON1";
    /** X2 mouse button */
    VirtualKey[VirtualKey["VK_XBUTTON2"] = 6] = "VK_XBUTTON2";
    /** BACKSPACE key */
    VirtualKey[VirtualKey["VK_BACK"] = 8] = "VK_BACK";
    /** TAB key */
    VirtualKey[VirtualKey["VK_TAB"] = 9] = "VK_TAB";
    /** CLEAR key */
    VirtualKey[VirtualKey["VK_CLEAR"] = 12] = "VK_CLEAR";
    VirtualKey[VirtualKey["VK_RETURN"] = 13] = "VK_RETURN";
    VirtualKey[VirtualKey["VK_SHIFT"] = 16] = "VK_SHIFT";
    VirtualKey[VirtualKey["VK_CONTROL"] = 17] = "VK_CONTROL";
    /** ALT key */
    VirtualKey[VirtualKey["VK_MENU"] = 18] = "VK_MENU";
    VirtualKey[VirtualKey["VK_PAUSE"] = 19] = "VK_PAUSE";
    /** CAPS LOCK key */
    VirtualKey[VirtualKey["VK_CAPITAL"] = 20] = "VK_CAPITAL";
    /** IME Kana mode */
    VirtualKey[VirtualKey["VK_KANA"] = 21] = "VK_KANA";
    /** IME Hanguel mode(maintained for compatibility; use VK_HANGUL)  */
    // VK_HANGUEL = 0x15,
    /** IME Hangul mode */
    VirtualKey[VirtualKey["VK_HANGUL"] = 21] = "VK_HANGUL";
    /** IME On */
    VirtualKey[VirtualKey["VK_IME_ON"] = 22] = "VK_IME_ON";
    VirtualKey[VirtualKey["VK_JUNJA"] = 23] = "VK_JUNJA";
    VirtualKey[VirtualKey["VK_FINAL"] = 24] = "VK_FINAL";
    VirtualKey[VirtualKey["VK_HANJA"] = 25] = "VK_HANJA";
    VirtualKey[VirtualKey["VK_KANJI"] = 25] = "VK_KANJI";
    /** IME Off */
    VirtualKey[VirtualKey["VK_IME_OFF"] = 26] = "VK_IME_OFF";
    /** ESC key */
    VirtualKey[VirtualKey["VK_ESCAPE"] = 27] = "VK_ESCAPE";
    /** IME convert */
    VirtualKey[VirtualKey["VK_CONVERT"] = 28] = "VK_CONVERT";
    /** IME nonconvert */
    VirtualKey[VirtualKey["VK_NONCONVERT"] = 29] = "VK_NONCONVERT";
    /** IME accept */
    VirtualKey[VirtualKey["VK_ACCEPT"] = 30] = "VK_ACCEPT";
    /** IME mode change request */
    VirtualKey[VirtualKey["VK_MODECHANGE"] = 31] = "VK_MODECHANGE";
    /** SPACEBAR */
    VirtualKey[VirtualKey["VK_SPACE"] = 32] = "VK_SPACE";
    /** PAGE UP key */
    VirtualKey[VirtualKey["VK_PRIOR"] = 33] = "VK_PRIOR";
    /** PAGE DOWN key */
    VirtualKey[VirtualKey["VK_NEXT"] = 34] = "VK_NEXT";
    /** END key */
    VirtualKey[VirtualKey["VK_END"] = 35] = "VK_END";
    /** HOME key */
    VirtualKey[VirtualKey["VK_HOME"] = 36] = "VK_HOME";
    /** LEFT ARROW key */
    VirtualKey[VirtualKey["VK_LEFT"] = 37] = "VK_LEFT";
    /** UP ARROW key */
    VirtualKey[VirtualKey["VK_UP"] = 38] = "VK_UP";
    /** RIGHT ARROW key */
    VirtualKey[VirtualKey["VK_RIGHT"] = 39] = "VK_RIGHT";
    /** DOWN ARROW key */
    VirtualKey[VirtualKey["VK_DOWN"] = 40] = "VK_DOWN";
    /** SELECT key */
    VirtualKey[VirtualKey["VK_SELECT"] = 41] = "VK_SELECT";
    /** PRINT key */
    VirtualKey[VirtualKey["VK_PRINT"] = 42] = "VK_PRINT";
    /** EXECUTE key */
    VirtualKey[VirtualKey["VK_EXECUTE"] = 43] = "VK_EXECUTE";
    /** PRINT SCREEN key */
    VirtualKey[VirtualKey["VK_SNAPSHOT"] = 44] = "VK_SNAPSHOT";
    /** INS key */
    VirtualKey[VirtualKey["VK_INSERT"] = 45] = "VK_INSERT";
    /** DEL key */
    VirtualKey[VirtualKey["VK_DELETE"] = 46] = "VK_DELETE";
    /** HELP key */
    VirtualKey[VirtualKey["VK_HELP"] = 47] = "VK_HELP";
    /** 0 key */
    VirtualKey[VirtualKey["VK_0"] = 48] = "VK_0";
    VirtualKey[VirtualKey["VK_1"] = 49] = "VK_1";
    VirtualKey[VirtualKey["VK_2"] = 50] = "VK_2";
    VirtualKey[VirtualKey["VK_3"] = 51] = "VK_3";
    VirtualKey[VirtualKey["VK_4"] = 52] = "VK_4";
    VirtualKey[VirtualKey["VK_5"] = 53] = "VK_5";
    VirtualKey[VirtualKey["VK_6"] = 54] = "VK_6";
    VirtualKey[VirtualKey["VK_7"] = 55] = "VK_7";
    VirtualKey[VirtualKey["VK_8"] = 56] = "VK_8";
    VirtualKey[VirtualKey["VK_9"] = 57] = "VK_9";
    /** A key */
    VirtualKey[VirtualKey["VK_A"] = 65] = "VK_A";
    VirtualKey[VirtualKey["VK_B"] = 66] = "VK_B";
    VirtualKey[VirtualKey["VK_C"] = 67] = "VK_C";
    VirtualKey[VirtualKey["VK_D"] = 68] = "VK_D";
    VirtualKey[VirtualKey["VK_E"] = 69] = "VK_E";
    VirtualKey[VirtualKey["VK_F"] = 70] = "VK_F";
    VirtualKey[VirtualKey["VK_G"] = 71] = "VK_G";
    VirtualKey[VirtualKey["VK_H"] = 72] = "VK_H";
    VirtualKey[VirtualKey["VK_I"] = 73] = "VK_I";
    VirtualKey[VirtualKey["VK_J"] = 74] = "VK_J";
    VirtualKey[VirtualKey["VK_K"] = 75] = "VK_K";
    VirtualKey[VirtualKey["VK_L"] = 76] = "VK_L";
    VirtualKey[VirtualKey["VK_M"] = 77] = "VK_M";
    VirtualKey[VirtualKey["VK_N"] = 78] = "VK_N";
    VirtualKey[VirtualKey["VK_O"] = 79] = "VK_O";
    VirtualKey[VirtualKey["VK_P"] = 80] = "VK_P";
    VirtualKey[VirtualKey["VK_Q"] = 81] = "VK_Q";
    VirtualKey[VirtualKey["VK_R"] = 82] = "VK_R";
    VirtualKey[VirtualKey["VK_S"] = 83] = "VK_S";
    VirtualKey[VirtualKey["VK_T"] = 84] = "VK_T";
    VirtualKey[VirtualKey["VK_U"] = 85] = "VK_U";
    VirtualKey[VirtualKey["VK_V"] = 86] = "VK_V";
    VirtualKey[VirtualKey["VK_W"] = 87] = "VK_W";
    VirtualKey[VirtualKey["VK_X"] = 88] = "VK_X";
    VirtualKey[VirtualKey["VK_Y"] = 89] = "VK_Y";
    VirtualKey[VirtualKey["VK_Z"] = 90] = "VK_Z";
    /** Left Windows key(Natural keyboard) */
    VirtualKey[VirtualKey["VK_LWIN"] = 91] = "VK_LWIN";
    /** Right Windows key(Natural keyboard) */
    VirtualKey[VirtualKey["VK_RWIN"] = 92] = "VK_RWIN";
    /** Applications key(Natural keyboard) */
    VirtualKey[VirtualKey["VK_APPS"] = 93] = "VK_APPS";
    /** Computer Sleep key */
    VirtualKey[VirtualKey["VK_SLEEP"] = 95] = "VK_SLEEP";
    /** Numeric keypad 0 key */
    VirtualKey[VirtualKey["VK_NUMPAD0"] = 96] = "VK_NUMPAD0";
    /** Numeric keypad 1 key */
    VirtualKey[VirtualKey["VK_NUMPAD1"] = 97] = "VK_NUMPAD1";
    /** Numeric keypad 2 key */
    VirtualKey[VirtualKey["VK_NUMPAD2"] = 98] = "VK_NUMPAD2";
    /** Numeric keypad 3 key */
    VirtualKey[VirtualKey["VK_NUMPAD3"] = 99] = "VK_NUMPAD3";
    /** Numeric keypad 4 key */
    VirtualKey[VirtualKey["VK_NUMPAD4"] = 100] = "VK_NUMPAD4";
    /** Numeric keypad 5 key */
    VirtualKey[VirtualKey["VK_NUMPAD5"] = 101] = "VK_NUMPAD5";
    /** Numeric keypad 6 key */
    VirtualKey[VirtualKey["VK_NUMPAD6"] = 102] = "VK_NUMPAD6";
    /** Numeric keypad 7 key */
    VirtualKey[VirtualKey["VK_NUMPAD7"] = 103] = "VK_NUMPAD7";
    /** Numeric keypad 8 key */
    VirtualKey[VirtualKey["VK_NUMPAD8"] = 104] = "VK_NUMPAD8";
    /** Numeric keypad 9 key */
    VirtualKey[VirtualKey["VK_NUMPAD9"] = 105] = "VK_NUMPAD9";
    /** Multiply key */
    VirtualKey[VirtualKey["VK_MULTIPLY"] = 106] = "VK_MULTIPLY";
    /** Add key */
    VirtualKey[VirtualKey["VK_ADD"] = 107] = "VK_ADD";
    /** Separator key */
    VirtualKey[VirtualKey["VK_SEPARATOR"] = 108] = "VK_SEPARATOR";
    /** Subtract key */
    VirtualKey[VirtualKey["VK_SUBTRACT"] = 109] = "VK_SUBTRACT";
    /** Decimal key */
    VirtualKey[VirtualKey["VK_DECIMAL"] = 110] = "VK_DECIMAL";
    /** Divide key */
    VirtualKey[VirtualKey["VK_DIVIDE"] = 111] = "VK_DIVIDE";
    /** F1 key */
    VirtualKey[VirtualKey["VK_F1"] = 112] = "VK_F1";
    VirtualKey[VirtualKey["VK_F2"] = 113] = "VK_F2";
    VirtualKey[VirtualKey["VK_F3"] = 114] = "VK_F3";
    VirtualKey[VirtualKey["VK_F4"] = 115] = "VK_F4";
    VirtualKey[VirtualKey["VK_F5"] = 116] = "VK_F5";
    VirtualKey[VirtualKey["VK_F6"] = 117] = "VK_F6";
    VirtualKey[VirtualKey["VK_F7"] = 118] = "VK_F7";
    VirtualKey[VirtualKey["VK_F8"] = 119] = "VK_F8";
    VirtualKey[VirtualKey["VK_F9"] = 120] = "VK_F9";
    VirtualKey[VirtualKey["VK_F10"] = 121] = "VK_F10";
    VirtualKey[VirtualKey["VK_F11"] = 122] = "VK_F11";
    VirtualKey[VirtualKey["VK_F12"] = 123] = "VK_F12";
    VirtualKey[VirtualKey["VK_F13"] = 124] = "VK_F13";
    VirtualKey[VirtualKey["VK_F14"] = 125] = "VK_F14";
    VirtualKey[VirtualKey["VK_F15"] = 126] = "VK_F15";
    VirtualKey[VirtualKey["VK_F16"] = 127] = "VK_F16";
    VirtualKey[VirtualKey["VK_F17"] = 128] = "VK_F17";
    VirtualKey[VirtualKey["VK_F18"] = 129] = "VK_F18";
    VirtualKey[VirtualKey["VK_F19"] = 130] = "VK_F19";
    VirtualKey[VirtualKey["VK_F20"] = 131] = "VK_F20";
    VirtualKey[VirtualKey["VK_F21"] = 132] = "VK_F21";
    VirtualKey[VirtualKey["VK_F22"] = 133] = "VK_F22";
    VirtualKey[VirtualKey["VK_F23"] = 134] = "VK_F23";
    VirtualKey[VirtualKey["VK_F24"] = 135] = "VK_F24";
    /** NUM LOCK key */
    VirtualKey[VirtualKey["VK_NUMLOCK"] = 144] = "VK_NUMLOCK";
    /** SCROLL LOCK key */
    VirtualKey[VirtualKey["VK_SCROLL"] = 145] = "VK_SCROLL";
    /** Left SHIFT key */
    VirtualKey[VirtualKey["VK_LSHIFT"] = 160] = "VK_LSHIFT";
    /** Right SHIFT key */
    VirtualKey[VirtualKey["VK_RSHIFT"] = 161] = "VK_RSHIFT";
    /** Left CONTROL key */
    VirtualKey[VirtualKey["VK_LCONTROL"] = 162] = "VK_LCONTROL";
    /** Right CONTROL key */
    VirtualKey[VirtualKey["VK_RCONTROL"] = 163] = "VK_RCONTROL";
    /** Left ALT key */
    VirtualKey[VirtualKey["VK_LMENU"] = 164] = "VK_LMENU";
    /** Right ALT key */
    VirtualKey[VirtualKey["VK_RMENU"] = 165] = "VK_RMENU";
    /** Browser Back key */
    VirtualKey[VirtualKey["VK_BROWSER_BACK"] = 166] = "VK_BROWSER_BACK";
    /** Browser Forward key */
    VirtualKey[VirtualKey["VK_BROWSER_FORWARD"] = 167] = "VK_BROWSER_FORWARD";
    /** Browser Refresh key */
    VirtualKey[VirtualKey["VK_BROWSER_REFRESH"] = 168] = "VK_BROWSER_REFRESH";
    /** Browser Stop key */
    VirtualKey[VirtualKey["VK_BROWSER_STOP"] = 169] = "VK_BROWSER_STOP";
    /** Browser Search key */
    VirtualKey[VirtualKey["VK_BROWSER_SEARCH"] = 170] = "VK_BROWSER_SEARCH";
    /** Browser Favorites key */
    VirtualKey[VirtualKey["VK_BROWSER_FAVORITES"] = 171] = "VK_BROWSER_FAVORITES";
    /** Browser Start and Home key */
    VirtualKey[VirtualKey["VK_BROWSER_HOME"] = 172] = "VK_BROWSER_HOME";
    /** Volume Mute key */
    VirtualKey[VirtualKey["VK_VOLUME_MUTE"] = 173] = "VK_VOLUME_MUTE";
    /** Volume Down key */
    VirtualKey[VirtualKey["VK_VOLUME_DOWN"] = 174] = "VK_VOLUME_DOWN";
    /** Volume Up key */
    VirtualKey[VirtualKey["VK_VOLUME_UP"] = 175] = "VK_VOLUME_UP";
    /** Next Track key */
    VirtualKey[VirtualKey["VK_MEDIA_NEXT_TRACK"] = 176] = "VK_MEDIA_NEXT_TRACK";
    /** Previous Track key */
    VirtualKey[VirtualKey["VK_MEDIA_PREV_TRACK"] = 177] = "VK_MEDIA_PREV_TRACK";
    /** Stop Media key  */
    VirtualKey[VirtualKey["VK_MEDIA_STOP"] = 178] = "VK_MEDIA_STOP";
    /** Play / Pause Media key */
    VirtualKey[VirtualKey["VK_MEDIA_PLAY_PAUSE"] = 179] = "VK_MEDIA_PLAY_PAUSE";
    /** Start Mail key */
    VirtualKey[VirtualKey["VK_LAUNCH_MAIL"] = 180] = "VK_LAUNCH_MAIL";
    /** Select Media key */
    VirtualKey[VirtualKey["VK_LAUNCH_MEDIA_SELECT"] = 181] = "VK_LAUNCH_MEDIA_SELECT";
    /** Start Application 1 key */
    VirtualKey[VirtualKey["VK_LAUNCH_APP1"] = 182] = "VK_LAUNCH_APP1";
    /** Start Application 2 key */
    VirtualKey[VirtualKey["VK_LAUNCH_APP2"] = 183] = "VK_LAUNCH_APP2";
    /** Used for miscellaneous characters; it can vary by keyboard.For the US standard keyboard, the ';:' key  */
    VirtualKey[VirtualKey["VK_OEM_1"] = 186] = "VK_OEM_1";
    /** For any country / region, the '+' key */
    VirtualKey[VirtualKey["VK_OEM_PLUS"] = 187] = "VK_OEM_PLUS";
    /** For any country / region, the ',' key */
    VirtualKey[VirtualKey["VK_OEM_COMMA"] = 188] = "VK_OEM_COMMA";
    /** For any country / region, the '-' key */
    VirtualKey[VirtualKey["VK_OEM_MINUS"] = 189] = "VK_OEM_MINUS";
    /** For any country / region, the '.' key */
    VirtualKey[VirtualKey["VK_OEM_PERIOD"] = 190] = "VK_OEM_PERIOD";
    /** Used for miscellaneous characters; it can vary by keyboard.For the US standard keyboard, the '/?' key */
    VirtualKey[VirtualKey["VK_OEM_2"] = 191] = "VK_OEM_2";
    /** Used for miscellaneous characters; it can vary by keyboard.For the US standard keyboard, the '`~' key  */
    VirtualKey[VirtualKey["VK_OEM_3"] = 192] = "VK_OEM_3";
    /** Used for miscellaneous characters; it can vary by keyboard.For the US standard keyboard, the '[{' key */
    VirtualKey[VirtualKey["VK_OEM_4"] = 219] = "VK_OEM_4";
    /** Used for miscellaneous characters; it can vary by keyboard.For the US standard keyboard, the '\|' key */
    VirtualKey[VirtualKey["VK_OEM_5"] = 220] = "VK_OEM_5";
    /** Used for miscellaneous characters; it can vary by keyboard.For the US standard keyboard, the ']}' key */
    VirtualKey[VirtualKey["VK_OEM_6"] = 221] = "VK_OEM_6";
    /**
     * Used for miscellaneous characters; it can vary by keyboard.For the US standard keyboard,
     * the 'single-quote/double-quote' key
     */
    VirtualKey[VirtualKey["VK_OEM_7"] = 222] = "VK_OEM_7";
    /** Used for miscellaneous characters; it can vary by keyboard. */
    VirtualKey[VirtualKey["VK_OEM_8"] = 223] = "VK_OEM_8";
    /** The <> keys on the US standard keyboard, or the \\| key on the non - US 102 - key keyboard  */
    VirtualKey[VirtualKey["VK_OEM_102"] = 226] = "VK_OEM_102";
    /** IME PROCESS key */
    VirtualKey[VirtualKey["VK_PROCESSKEY"] = 229] = "VK_PROCESSKEY";
    /**
     * Used to pass Unicode characters as if they were keystrokes.
     * The VK_PACKET key is the low word of a 32 - bit Virtual Key value used for non - keyboard input methods.
     * For more information, see Remark in KEYBDINPUT, SendInput, WM_KEYDOWN, and WM_KEYUP
     */
    VirtualKey[VirtualKey["VK_PACKET"] = 231] = "VK_PACKET";
    /** Attn key */
    VirtualKey[VirtualKey["VK_ATTN"] = 246] = "VK_ATTN";
    /** CrSel key */
    VirtualKey[VirtualKey["VK_CRSEL"] = 247] = "VK_CRSEL";
    /** ExSel key */
    VirtualKey[VirtualKey["VK_EXSEL"] = 248] = "VK_EXSEL";
    /** Erase EOF key */
    VirtualKey[VirtualKey["VK_EREOF"] = 249] = "VK_EREOF";
    /** Play key */
    VirtualKey[VirtualKey["VK_PLAY"] = 250] = "VK_PLAY";
    /** Zoom key */
    VirtualKey[VirtualKey["VK_ZOOM"] = 251] = "VK_ZOOM";
    /** Reserved */
    VirtualKey[VirtualKey["VK_NONAME"] = 252] = "VK_NONAME";
    /** PA1 key */
    VirtualKey[VirtualKey["VK_PA1"] = 253] = "VK_PA1";
    /** Clear key */
    VirtualKey[VirtualKey["VK_OEM_CLEAR"] = 254] = "VK_OEM_CLEAR";
})(exports.VirtualKey || (exports.VirtualKey = {}));

/** https://docs.microsoft.com/en-us/windows/desktop/api/winbase/nf-winbase-setthreadexecutionstate */
exports.EXECUTION_STATE = void 0;
(function (EXECUTION_STATE) {
    /**
     * Enables away mode. This value must be specified with ES_CONTINUOUS.
     * Away mode should be used only by media-recording and media-distribution
     * applications that must perform critical background processing on desktop
     * computers while the computer appears to be sleeping. See Remarks.
     */
    EXECUTION_STATE[EXECUTION_STATE["ES_CONTINUOUS"] = 2147483648] = "ES_CONTINUOUS";
    /**
     * Informs the system that the state being set should remain in effect until
     * the next call that uses ES_CONTINUOUS and one of the other state flags is cleared.
     */
    EXECUTION_STATE[EXECUTION_STATE["ES_AWAYMODE_REQUIRED"] = 64] = "ES_AWAYMODE_REQUIRED";
    /** Forces the display to be on by resetting the display idle timer. */
    EXECUTION_STATE[EXECUTION_STATE["ES_SYSTEM_REQUIRED"] = 1] = "ES_SYSTEM_REQUIRED";
    /** Forces the system to be in the working state by resetting the system idle timer. */
    EXECUTION_STATE[EXECUTION_STATE["ES_DISPLAY_REQUIRED"] = 2] = "ES_DISPLAY_REQUIRED";
})(exports.EXECUTION_STATE || (exports.EXECUTION_STATE = {}));

/**
 * Specifies the clockwise rotation of the display.
 * @link https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ne-wingdi-displayconfig_rotation
 */
exports.DISPLAYCONFIG_ROTATION = void 0;
(function (DISPLAYCONFIG_ROTATION) {
    DISPLAYCONFIG_ROTATION[DISPLAYCONFIG_ROTATION["DISPLAYCONFIG_ROTATION_IDENTITY"] = 1] = "DISPLAYCONFIG_ROTATION_IDENTITY";
    DISPLAYCONFIG_ROTATION[DISPLAYCONFIG_ROTATION["DISPLAYCONFIG_ROTATION_ROTATE90"] = 2] = "DISPLAYCONFIG_ROTATION_ROTATE90";
    DISPLAYCONFIG_ROTATION[DISPLAYCONFIG_ROTATION["DISPLAYCONFIG_ROTATION_ROTATE180"] = 3] = "DISPLAYCONFIG_ROTATION_ROTATE180";
    DISPLAYCONFIG_ROTATION[DISPLAYCONFIG_ROTATION["DISPLAYCONFIG_ROTATION_ROTATE270"] = 4] = "DISPLAYCONFIG_ROTATION_ROTATE270";
    DISPLAYCONFIG_ROTATION[DISPLAYCONFIG_ROTATION["DISPLAYCONFIG_ROTATION_FORCE_UINT32"] = 4294967295] = "DISPLAYCONFIG_ROTATION_FORCE_UINT32";
})(exports.DISPLAYCONFIG_ROTATION || (exports.DISPLAYCONFIG_ROTATION = {}));
/**
 * Specifies the scaling transformation applied to content displayed
 * on a video present network (VidPN) present path.
 * @link https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ne-wingdi-displayconfig_scaling
 */
exports.DISPLAYCONFIG_SCALING = void 0;
(function (DISPLAYCONFIG_SCALING) {
    DISPLAYCONFIG_SCALING[DISPLAYCONFIG_SCALING["DISPLAYCONFIG_SCALING_IDENTITY"] = 1] = "DISPLAYCONFIG_SCALING_IDENTITY";
    DISPLAYCONFIG_SCALING[DISPLAYCONFIG_SCALING["DISPLAYCONFIG_SCALING_CENTERED"] = 2] = "DISPLAYCONFIG_SCALING_CENTERED";
    DISPLAYCONFIG_SCALING[DISPLAYCONFIG_SCALING["DISPLAYCONFIG_SCALING_STRETCHED"] = 3] = "DISPLAYCONFIG_SCALING_STRETCHED";
    DISPLAYCONFIG_SCALING[DISPLAYCONFIG_SCALING["DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX"] = 4] = "DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX";
    DISPLAYCONFIG_SCALING[DISPLAYCONFIG_SCALING["DISPLAYCONFIG_SCALING_CUSTOM"] = 5] = "DISPLAYCONFIG_SCALING_CUSTOM";
    DISPLAYCONFIG_SCALING[DISPLAYCONFIG_SCALING["DISPLAYCONFIG_SCALING_PREFERRED"] = 128] = "DISPLAYCONFIG_SCALING_PREFERRED";
    DISPLAYCONFIG_SCALING[DISPLAYCONFIG_SCALING["DISPLAYCONFIG_SCALING_FORCE_UINT32"] = 4294967295] = "DISPLAYCONFIG_SCALING_FORCE_UINT32";
})(exports.DISPLAYCONFIG_SCALING || (exports.DISPLAYCONFIG_SCALING = {}));
/**
 * Specifies the method that the display uses to create an image on a screen.
 * @link https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ne-wingdi-displayconfig_scanline_ordering
 */
exports.DISPLAYCONFIG_SCANLINE_ORDERING = void 0;
(function (DISPLAYCONFIG_SCANLINE_ORDERING) {
    DISPLAYCONFIG_SCANLINE_ORDERING[DISPLAYCONFIG_SCANLINE_ORDERING["DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED"] = 0] = "DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED";
    DISPLAYCONFIG_SCANLINE_ORDERING[DISPLAYCONFIG_SCANLINE_ORDERING["DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE"] = 1] = "DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE";
    DISPLAYCONFIG_SCANLINE_ORDERING[DISPLAYCONFIG_SCANLINE_ORDERING["DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED"] = 2] = "DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED";
    DISPLAYCONFIG_SCANLINE_ORDERING[DISPLAYCONFIG_SCANLINE_ORDERING["DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST"] = 3] = "DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST";
    DISPLAYCONFIG_SCANLINE_ORDERING[DISPLAYCONFIG_SCANLINE_ORDERING["DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST"] = 3] = "DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST";
    DISPLAYCONFIG_SCANLINE_ORDERING[DISPLAYCONFIG_SCANLINE_ORDERING["DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32"] = 4294967295] = "DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32";
})(exports.DISPLAYCONFIG_SCANLINE_ORDERING || (exports.DISPLAYCONFIG_SCANLINE_ORDERING = {}));

exports.PrinterEnumFlags = void 0;
(function (PrinterEnumFlags) {
    PrinterEnumFlags[PrinterEnumFlags["PRINTER_ENUM_DEFAULT"] = 1] = "PRINTER_ENUM_DEFAULT";
    PrinterEnumFlags[PrinterEnumFlags["PRINTER_ENUM_LOCAL"] = 2] = "PRINTER_ENUM_LOCAL";
    PrinterEnumFlags[PrinterEnumFlags["PRINTER_ENUM_CONNECTIONS"] = 4] = "PRINTER_ENUM_CONNECTIONS";
    PrinterEnumFlags[PrinterEnumFlags["PRINTER_ENUM_NAME"] = 8] = "PRINTER_ENUM_NAME";
    PrinterEnumFlags[PrinterEnumFlags["PRINTER_ENUM_REMOTE"] = 16] = "PRINTER_ENUM_REMOTE";
    PrinterEnumFlags[PrinterEnumFlags["PRINTER_ENUM_SHARED"] = 32] = "PRINTER_ENUM_SHARED";
    PrinterEnumFlags[PrinterEnumFlags["PRINTER_ENUM_NETWORK"] = 64] = "PRINTER_ENUM_NETWORK";
    PrinterEnumFlags[PrinterEnumFlags["PRINTER_ENUM_EXPAND"] = 16384] = "PRINTER_ENUM_EXPAND";
    PrinterEnumFlags[PrinterEnumFlags["PRINTER_ENUM_CONTAINER"] = 32768] = "PRINTER_ENUM_CONTAINER";
    PrinterEnumFlags[PrinterEnumFlags["PRINTER_ENUM_ICONMASK"] = 16711680] = "PRINTER_ENUM_ICONMASK";
    PrinterEnumFlags[PrinterEnumFlags["PRINTER_ENUM_ICON1"] = 65536] = "PRINTER_ENUM_ICON1";
    PrinterEnumFlags[PrinterEnumFlags["PRINTER_ENUM_ICON2"] = 131072] = "PRINTER_ENUM_ICON2";
    PrinterEnumFlags[PrinterEnumFlags["PRINTER_ENUM_ICON3"] = 262144] = "PRINTER_ENUM_ICON3";
    PrinterEnumFlags[PrinterEnumFlags["PRINTER_ENUM_ICON4"] = 524288] = "PRINTER_ENUM_ICON4";
    PrinterEnumFlags[PrinterEnumFlags["PRINTER_ENUM_ICON5"] = 1048576] = "PRINTER_ENUM_ICON5";
    PrinterEnumFlags[PrinterEnumFlags["PRINTER_ENUM_ICON6"] = 2097152] = "PRINTER_ENUM_ICON6";
    PrinterEnumFlags[PrinterEnumFlags["PRINTER_ENUM_ICON7"] = 4194304] = "PRINTER_ENUM_ICON7";
    PrinterEnumFlags[PrinterEnumFlags["PRINTER_ENUM_ICON8"] = 8388608] = "PRINTER_ENUM_ICON8";
    PrinterEnumFlags[PrinterEnumFlags["PRINTER_ENUM_HIDE"] = 16777216] = "PRINTER_ENUM_HIDE";
    PrinterEnumFlags[PrinterEnumFlags["PRINTER_ENUM_CATEGORY_ALL"] = 33554432] = "PRINTER_ENUM_CATEGORY_ALL";
    PrinterEnumFlags[PrinterEnumFlags["PRINTER_ENUM_CATEGORY_3D"] = 67108864] = "PRINTER_ENUM_CATEGORY_3D";
})(exports.PrinterEnumFlags || (exports.PrinterEnumFlags = {}));

/**
 * Flash both the window caption and taskbar button.This is equivalent to setting the FLASHW_CAPTION | FLASHW_TRAY flags.
 * @link https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-flashwinfo
 */
const FLASHW_ALL = 0x00000003;
/**
 * Flash the window caption.
 * @link https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-flashwinfo
 */
const FLASHW_CAPTION = 0x00000001;
/**
 * Stop flashing. The system restores the window to its original state.
 * @link https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-flashwinfo
 */
const FLASHW_STOP = 0;
/**
 * Flash continuously, until the FLASHW_STOP flag is set.
 * @link https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-flashwinfo
 */
const FLASHW_TIMER = 0x00000004;
/**
 * Flash continuously until the window comes to the foreground.
 * @link https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-flashwinfo
 */
const FLASHW_TIMERNOFG = 0x0000000C;
/**
 * Flash the taskbar button.
 * @link https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-flashwinfo
 */
const FLASHW_TRAY = 0x00000002;

/**
 * Used by SendInput to store information for synthesizing input events such as keystrokes, mouse movement, and mouse clicks.
 * @link https://learn.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-input
 */
exports.INPUT = void 0;
(function (INPUT) {
    INPUT[INPUT["INPUT_MOUSE"] = 0] = "INPUT_MOUSE";
    INPUT[INPUT["INPUT_KEYBOARD"] = 1] = "INPUT_KEYBOARD";
    INPUT[INPUT["INPUT_HARDWARE"] = 2] = "INPUT_HARDWARE";
})(exports.INPUT || (exports.INPUT = {}));

/**
 * A simulated keyboard event
 * @link https://learn.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-keybdinput
 */
exports.KEYBDINPUT = void 0;
(function (KEYBDINPUT) {
    KEYBDINPUT[KEYBDINPUT["KEYEVENTF_EXTENDEDKEY"] = 1] = "KEYEVENTF_EXTENDEDKEY";
    KEYBDINPUT[KEYBDINPUT["KEYEVENTF_KEYUP"] = 2] = "KEYEVENTF_KEYUP";
    KEYBDINPUT[KEYBDINPUT["KEYEVENTF_SCANCODE"] = 8] = "KEYEVENTF_SCANCODE";
    KEYBDINPUT[KEYBDINPUT["KEYEVENTF_UNICODE"] = 4] = "KEYEVENTF_UNICODE";
})(exports.KEYBDINPUT || (exports.KEYBDINPUT = {}));

/**
 * A simulated keyboard event
 * @link https://learn.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-mouseinput
 */
exports.MOUSEINPUT = void 0;
(function (MOUSEINPUT) {
    MOUSEINPUT[MOUSEINPUT["MOUSEEVENTF_MOVE"] = 1] = "MOUSEEVENTF_MOVE";
    MOUSEINPUT[MOUSEINPUT["MOUSEEVENTF_LEFTDOWN"] = 2] = "MOUSEEVENTF_LEFTDOWN";
    MOUSEINPUT[MOUSEINPUT["MOUSEEVENTF_LEFTUP"] = 4] = "MOUSEEVENTF_LEFTUP";
    MOUSEINPUT[MOUSEINPUT["MOUSEEVENTF_RIGHTDOWN"] = 8] = "MOUSEEVENTF_RIGHTDOWN";
    MOUSEINPUT[MOUSEINPUT["MOUSEEVENTF_RIGHTUP"] = 16] = "MOUSEEVENTF_RIGHTUP";
    MOUSEINPUT[MOUSEINPUT["MOUSEEVENTF_MIDDLEDOWN"] = 32] = "MOUSEEVENTF_MIDDLEDOWN";
    MOUSEINPUT[MOUSEINPUT["MOUSEEVENTF_MIDDLEUP"] = 64] = "MOUSEEVENTF_MIDDLEUP";
    MOUSEINPUT[MOUSEINPUT["MOUSEEVENTF_XDOWN"] = 128] = "MOUSEEVENTF_XDOWN";
    MOUSEINPUT[MOUSEINPUT["MOUSEEVENTF_XUP"] = 256] = "MOUSEEVENTF_XUP";
    MOUSEINPUT[MOUSEINPUT["MOUSEEVENTF_WHEEL"] = 2048] = "MOUSEEVENTF_WHEEL";
    MOUSEINPUT[MOUSEINPUT["MOUSEEVENTF_HWHEEL"] = 4096] = "MOUSEEVENTF_HWHEEL";
    MOUSEINPUT[MOUSEINPUT["MOUSEEVENTF_MOVE_NOCOALESCE"] = 8192] = "MOUSEEVENTF_MOVE_NOCOALESCE";
    MOUSEINPUT[MOUSEINPUT["MOUSEEVENTF_VIRTUALDESK"] = 16384] = "MOUSEEVENTF_VIRTUALDESK";
    MOUSEINPUT[MOUSEINPUT["MOUSEEVENTF_ABSOLUTE"] = 32768] = "MOUSEEVENTF_ABSOLUTE";
})(exports.MOUSEINPUT || (exports.MOUSEINPUT = {}));

/**
 * @link https://learn.microsoft.com/en-us/windows/win32/winmsg/windowing
 * @link https://learn.microsoft.com/zh-cn/windows/win32/winmsg/window-notifications
 */
exports.WIN_MSG = void 0;
(function (WIN_MSG) {
    /** https://docs.microsoft.com/zh-cn/windows/win32/winmsg/window-messages */
    WIN_MSG[WIN_MSG["MN_GETHMENU"] = 481] = "MN_GETHMENU";
    WIN_MSG[WIN_MSG["WM_ERASEBKGND"] = 20] = "WM_ERASEBKGND";
    WIN_MSG[WIN_MSG["WM_GETFONT"] = 49] = "WM_GETFONT";
    WIN_MSG[WIN_MSG["WM_GETTEXT"] = 13] = "WM_GETTEXT";
    WIN_MSG[WIN_MSG["WM_GETTEXTLENGTH"] = 14] = "WM_GETTEXTLENGTH";
    WIN_MSG[WIN_MSG["WM_SETFONT"] = 48] = "WM_SETFONT";
    WIN_MSG[WIN_MSG["WM_SETICON"] = 128] = "WM_SETICON";
    WIN_MSG[WIN_MSG["WM_SETTEXT"] = 12] = "WM_SETTEXT";
    /** https://docs.microsoft.com/zh-cn/windows/win32/winmsg/window-notifications */
    WIN_MSG[WIN_MSG["WM_ACTIVATEAPP"] = 28] = "WM_ACTIVATEAPP";
    WIN_MSG[WIN_MSG["WM_CANCELMODE"] = 31] = "WM_CANCELMODE";
    WIN_MSG[WIN_MSG["WM_CHILDACTIVATE"] = 34] = "WM_CHILDACTIVATE";
    WIN_MSG[WIN_MSG["WM_CLOSE"] = 16] = "WM_CLOSE";
    WIN_MSG[WIN_MSG["WM_CREATE"] = 1] = "WM_CREATE";
    WIN_MSG[WIN_MSG["WM_DESTROY"] = 2] = "WM_DESTROY";
    WIN_MSG[WIN_MSG["WM_ENABLE"] = 10] = "WM_ENABLE";
    WIN_MSG[WIN_MSG["WM_ENTERSIZEMOVE"] = 561] = "WM_ENTERSIZEMOVE";
    WIN_MSG[WIN_MSG["WM_EXITSIZEMOVE"] = 562] = "WM_EXITSIZEMOVE";
    WIN_MSG[WIN_MSG["WM_GETICON"] = 127] = "WM_GETICON";
    WIN_MSG[WIN_MSG["WM_GETMINMAXINFO"] = 36] = "WM_GETMINMAXINFO";
    WIN_MSG[WIN_MSG["WM_INPUTLANGCHANGE"] = 81] = "WM_INPUTLANGCHANGE";
    WIN_MSG[WIN_MSG["WM_INPUTLANGCHANGEREQUEST"] = 80] = "WM_INPUTLANGCHANGEREQUEST";
    WIN_MSG[WIN_MSG["WM_MOVE"] = 3] = "WM_MOVE";
    WIN_MSG[WIN_MSG["WM_MOVING"] = 534] = "WM_MOVING";
    WIN_MSG[WIN_MSG["WM_NCACTIVATE"] = 134] = "WM_NCACTIVATE";
    WIN_MSG[WIN_MSG["WM_NCCALCSIZE"] = 131] = "WM_NCCALCSIZE";
    WIN_MSG[WIN_MSG["WM_NCCREATE"] = 129] = "WM_NCCREATE";
    WIN_MSG[WIN_MSG["WM_NCDESTROY"] = 130] = "WM_NCDESTROY";
    WIN_MSG[WIN_MSG["WM_NULL"] = 0] = "WM_NULL";
    WIN_MSG[WIN_MSG["WM_QUERYDRAGICON"] = 55] = "WM_QUERYDRAGICON";
    WIN_MSG[WIN_MSG["WM_QUERYOPEN"] = 19] = "WM_QUERYOPEN";
    WIN_MSG[WIN_MSG["WM_QUIT"] = 18] = "WM_QUIT";
    WIN_MSG[WIN_MSG["WM_SHOWWINDOW"] = 24] = "WM_SHOWWINDOW";
    WIN_MSG[WIN_MSG["WM_SIZE"] = 5] = "WM_SIZE";
    WIN_MSG[WIN_MSG["WM_SIZING"] = 532] = "WM_SIZING";
    WIN_MSG[WIN_MSG["WM_STYLECHANGED"] = 125] = "WM_STYLECHANGED";
    WIN_MSG[WIN_MSG["WM_STYLECHANGING"] = 124] = "WM_STYLECHANGING";
    WIN_MSG[WIN_MSG["WM_THEMECHANGED"] = 794] = "WM_THEMECHANGED";
    WIN_MSG[WIN_MSG["WM_USERCHANGED"] = 84] = "WM_USERCHANGED";
    WIN_MSG[WIN_MSG["WM_WINDOWPOSCHANGED"] = 71] = "WM_WINDOWPOSCHANGED";
    WIN_MSG[WIN_MSG["WM_WINDOWPOSCHANGING"] = 70] = "WM_WINDOWPOSCHANGING";
    /** https://learn.microsoft.com/en-us/windows/win32/dataxchg/wm-copydata */
    WIN_MSG[WIN_MSG["WM_COPYDATA"] = 74] = "WM_COPYDATA";
    // https://learn.microsoft.com/en-us/windows/win32/menurc/menu-notifications
    WIN_MSG[WIN_MSG["WM_COMMAND"] = 273] = "WM_COMMAND";
    WIN_MSG[WIN_MSG["WM_CONTEXTMENU"] = 123] = "WM_CONTEXTMENU";
    WIN_MSG[WIN_MSG["WM_ENTERMENULOOP"] = 529] = "WM_ENTERMENULOOP";
    WIN_MSG[WIN_MSG["WM_EXITMENULOOP"] = 530] = "WM_EXITMENULOOP";
    WIN_MSG[WIN_MSG["WM_GETTITLEBARINFOEX"] = 831] = "WM_GETTITLEBARINFOEX";
    WIN_MSG[WIN_MSG["WM_MENUCOMMAND"] = 294] = "WM_MENUCOMMAND";
    WIN_MSG[WIN_MSG["WM_MENUDRAG"] = 291] = "WM_MENUDRAG";
    WIN_MSG[WIN_MSG["WM_MENUGETOBJECT"] = 292] = "WM_MENUGETOBJECT";
    WIN_MSG[WIN_MSG["WM_MENURBUTTONUP"] = 290] = "WM_MENURBUTTONUP";
    WIN_MSG[WIN_MSG["WM_NEXTMENU"] = 531] = "WM_NEXTMENU";
    WIN_MSG[WIN_MSG["WM_UNINITMENUPOPUP"] = 293] = "WM_UNINITMENUPOPUP";
})(exports.WIN_MSG || (exports.WIN_MSG = {}));

/**
 * @link https://learn.microsoft.com/zh-cn/windows/win32/printdocs/printer-info-6
 * @link https://github.com/wine-mirror/wine/blob/master/include/winspool.h
 */
exports.PRINTER_STATUS = void 0;
(function (PRINTER_STATUS) {
    PRINTER_STATUS[PRINTER_STATUS["unknown"] = 0] = "unknown";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_PAUSED"] = 1] = "PRINTER_STATUS_PAUSED";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_ERROR"] = 2] = "PRINTER_STATUS_ERROR";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_PENDING_DELETION"] = 4] = "PRINTER_STATUS_PENDING_DELETION";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_PAPER_JAM"] = 8] = "PRINTER_STATUS_PAPER_JAM";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_PAPER_OUT"] = 16] = "PRINTER_STATUS_PAPER_OUT";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_MANUAL_FEED"] = 32] = "PRINTER_STATUS_MANUAL_FEED";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_PAPER_PROBLEM"] = 64] = "PRINTER_STATUS_PAPER_PROBLEM";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_OFFLINE"] = 128] = "PRINTER_STATUS_OFFLINE";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_IO_ACTIVE"] = 256] = "PRINTER_STATUS_IO_ACTIVE";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_BUSY"] = 512] = "PRINTER_STATUS_BUSY";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_PRINTING"] = 1024] = "PRINTER_STATUS_PRINTING";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_OUTPUT_BIN_FULL"] = 2048] = "PRINTER_STATUS_OUTPUT_BIN_FULL";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_NOT_AVAILABLE"] = 4096] = "PRINTER_STATUS_NOT_AVAILABLE";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_WAITING"] = 8192] = "PRINTER_STATUS_WAITING";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_PROCESSING"] = 16384] = "PRINTER_STATUS_PROCESSING";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_INITIALIZING"] = 32768] = "PRINTER_STATUS_INITIALIZING";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_WARMING_UP"] = 65536] = "PRINTER_STATUS_WARMING_UP";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_TONER_LOW"] = 131072] = "PRINTER_STATUS_TONER_LOW";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_NO_TONER"] = 262144] = "PRINTER_STATUS_NO_TONER";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_PAGE_PUNT"] = 524288] = "PRINTER_STATUS_PAGE_PUNT";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_USER_INTERVENTION"] = 1048576] = "PRINTER_STATUS_USER_INTERVENTION";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_OUT_OF_MEMORY"] = 2097152] = "PRINTER_STATUS_OUT_OF_MEMORY";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_DOOR_OPEN"] = 4194304] = "PRINTER_STATUS_DOOR_OPEN";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_SERVER_UNKNOWN"] = 8388608] = "PRINTER_STATUS_SERVER_UNKNOWN";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_POWER_SAVE"] = 16777216] = "PRINTER_STATUS_POWER_SAVE";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_SERVER_OFFLINE"] = 33554432] = "PRINTER_STATUS_SERVER_OFFLINE";
    PRINTER_STATUS[PRINTER_STATUS["PRINTER_STATUS_DRIVER_UPDATE_NEEDED"] = 67108864] = "PRINTER_STATUS_DRIVER_UPDATE_NEEDED";
})(exports.PRINTER_STATUS || (exports.PRINTER_STATUS = {}));

exports.CW_USEDEFAULT = CW_USEDEFAULT;
exports.FLASHW_ALL = FLASHW_ALL;
exports.FLASHW_CAPTION = FLASHW_CAPTION;
exports.FLASHW_STOP = FLASHW_STOP;
exports.FLASHW_TIMER = FLASHW_TIMER;
exports.FLASHW_TIMERNOFG = FLASHW_TIMERNOFG;
exports.FLASHW_TRAY = FLASHW_TRAY;
exports.PM_NOREMOVE = PM_NOREMOVE;
exports.PM_NOYIELD = PM_NOYIELD;
exports.PM_REMOVE = PM_REMOVE;
exports.WS_BORDER = WS_BORDER;
exports.WS_CAPTION = WS_CAPTION;
exports.WS_CHILD = WS_CHILD;
exports.WS_CLIPCHILDREN = WS_CLIPCHILDREN;
exports.WS_CLIPSIBLINGS = WS_CLIPSIBLINGS;
exports.WS_DISABLED = WS_DISABLED;
exports.WS_DLGFRAME = WS_DLGFRAME;
exports.WS_EX_ACCEPTFILES = WS_EX_ACCEPTFILES;
exports.WS_EX_APPWINDOW = WS_EX_APPWINDOW;
exports.WS_EX_CLIENTEDGE = WS_EX_CLIENTEDGE;
exports.WS_EX_COMPOSITED = WS_EX_COMPOSITED;
exports.WS_EX_CONTEXTHELP = WS_EX_CONTEXTHELP;
exports.WS_EX_CONTROLPARENT = WS_EX_CONTROLPARENT;
exports.WS_EX_DLGMODALFRAME = WS_EX_DLGMODALFRAME;
exports.WS_EX_LAYERED = WS_EX_LAYERED;
exports.WS_EX_LAYOUTRTL = WS_EX_LAYOUTRTL;
exports.WS_EX_LEFT = WS_EX_LEFT;
exports.WS_EX_LEFTSCROLLBAR = WS_EX_LEFTSCROLLBAR;
exports.WS_EX_LTRREADING = WS_EX_LTRREADING;
exports.WS_EX_MDICHILD = WS_EX_MDICHILD;
exports.WS_EX_NOACTIVATE = WS_EX_NOACTIVATE;
exports.WS_EX_NOINHERITLAYOUT = WS_EX_NOINHERITLAYOUT;
exports.WS_EX_NOPARENTNOTIFY = WS_EX_NOPARENTNOTIFY;
exports.WS_EX_NOREDIRECTIONBITMAP = WS_EX_NOREDIRECTIONBITMAP;
exports.WS_EX_OVERLAPPEDWINDOW = WS_EX_OVERLAPPEDWINDOW;
exports.WS_EX_PALETTEWINDOW = WS_EX_PALETTEWINDOW;
exports.WS_EX_RIGHT = WS_EX_RIGHT;
exports.WS_EX_RIGHTSCROLLBAR = WS_EX_RIGHTSCROLLBAR;
exports.WS_EX_RTLREADING = WS_EX_RTLREADING;
exports.WS_EX_STATICEDGE = WS_EX_STATICEDGE;
exports.WS_EX_TOOLWINDOW = WS_EX_TOOLWINDOW;
exports.WS_EX_TOPMOST = WS_EX_TOPMOST;
exports.WS_EX_TRANSPARENT = WS_EX_TRANSPARENT;
exports.WS_EX_WINDOWEDGE = WS_EX_WINDOWEDGE;
exports.WS_GROUP = WS_GROUP;
exports.WS_HSCROLL = WS_HSCROLL;
exports.WS_ICONIC = WS_ICONIC;
exports.WS_MAXIMIZE = WS_MAXIMIZE;
exports.WS_MAXIMIZEBOX = WS_MAXIMIZEBOX;
exports.WS_MINIMIZE = WS_MINIMIZE;
exports.WS_MINIMIZEBOX = WS_MINIMIZEBOX;
exports.WS_OVERLAPPED = WS_OVERLAPPED;
exports.WS_OVERLAPPEDWINDOW = WS_OVERLAPPEDWINDOW;
exports.WS_POPUP = WS_POPUP;
exports.WS_POPUPWINDOW = WS_POPUPWINDOW;
exports.WS_SIZEBOX = WS_SIZEBOX;
exports.WS_SYSMENU = WS_SYSMENU;
exports.WS_TABSTOP = WS_TABSTOP;
exports.WS_THICKFRAME = WS_THICKFRAME;
exports.WS_TILED = WS_TILED;
exports.WS_TILEDWINDOW = WS_TILEDWINDOW;
exports.WS_VISIBLE = WS_VISIBLE;
exports.WS_VSCROLL = WS_VSCROLL;
//# sourceMappingURL=index.consts.cjs.map
