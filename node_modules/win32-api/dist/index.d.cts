import { FLib, LoadOptions } from 'win32-def';
export { Config, config, ffi } from 'win32-def';
import * as D from 'win32-def/def';
export { D as Def };
import * as T from 'win32-def/types';
export { T as Types };
import * as S from 'win32-def/struct';
export { S as Struct };
export { KoffiFunction } from 'koffi';

declare class DefComctl32 implements T.LibDefBase {
    [x: string]: T.FnDefFullParams;
    /** https://learn.microsoft.com/en-us/windows/win32/api/commctrl/nf-commctrl-initcommoncontrolsex */
    static InitCommonControlsEx: (D.Def.int32 | "INITCOMMONCONTROLSEX*"[])[];
}

declare class Comctl32 implements T.LibDef2Type<typeof DefComctl32> {
    /** https://learn.microsoft.com/en-us/windows/win32/api/commctrl/nf-commctrl-initcommoncontrolsex */
    InitCommonControlsEx: (lpInitCtrls: S.INITCOMMONCONTROLSEX_Type) => T.BOOL;
}

declare const dllName$5 = DllNames.comctl32;
type LibComctl32 = FLib<Comctl32>;
declare const load$5: (fns?: LoadOptions["usedFuncNames"]) => FLib<Comctl32>;

type index$5_Comctl32 = Comctl32;
declare const index$5_Comctl32: typeof Comctl32;
type index$5_DefComctl32 = DefComctl32;
declare const index$5_DefComctl32: typeof DefComctl32;
type index$5_LibComctl32 = LibComctl32;
declare namespace index$5 {
  export { index$5_Comctl32 as Comctl32, index$5_DefComctl32 as DefComctl32, type index$5_LibComctl32 as LibComctl32, dllName$5 as dllName, load$5 as load };
}

declare class DefGdi32 implements T.LibDefBase {
    [x: string]: T.FnDefFullParams;
    /** https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-createcompatiblebitmap */
    static CreateCompatibleBitmap: (D.Def.uint32 | D.Def.uint64 | (D.Def.int | D.Def.uint32 | D.Def.uint64)[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-createcompatibledc */
    static CreateCompatibleDC: (D.Def.uint32 | D.Def.uint64 | (D.Def.uint32 | D.Def.uint64)[])[];
}

declare class Gdi32 implements T.LibDef2Type<typeof DefGdi32> {
    /**
     * Creates a bitmap compatible with the device that is associated with the specified device context.
     * @link https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-createcompatiblebitmap
     */
    CreateCompatibleBitmap: (hdc: T.HDC, cx: T.INT, cy: T.INT) => T.HBITMAP;
    /** https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-createcompatibledc */
    CreateCompatibleDC: (hdc: T.HDC) => T.HDC;
}

declare const dllName$4 = DllNames.gdi32;
type LibGdi32 = FLib<Gdi32>;
declare const load$4: (fns?: LoadOptions["usedFuncNames"]) => FLib<Gdi32>;

type index$4_DefGdi32 = DefGdi32;
declare const index$4_DefGdi32: typeof DefGdi32;
type index$4_Gdi32 = Gdi32;
declare const index$4_Gdi32: typeof Gdi32;
type index$4_LibGdi32 = LibGdi32;
declare namespace index$4 {
  export { index$4_DefGdi32 as DefGdi32, index$4_Gdi32 as Gdi32, type index$4_LibGdi32 as LibGdi32, dllName$4 as dllName, load$4 as load };
}

declare class DefKernel32 implements T.LibDefBase {
    [x: string]: T.FnDefFullParams;
    static FormatMessageW: (D.Def.uint32 | string[])[];
    static FreeConsole: (D.Def.int32 | never[])[];
    static GenerateConsoleCtrlEvent: (D.Def.int32 | D.Def.uint32[])[];
    /** err code: https://msdn.microsoft.com/zh-cn/library/windows/desktop/ms681381(v=vs.85).aspx */
    static GetLastError: (D.Def.uint32 | never[])[];
    /** retrieve value from buf by readUInt32() */
    static GetModuleHandleW: (D.Def.uint32 | D.Def.uint64 | string[])[];
    /** flags, optional LPCTSTR name, ref hModule */
    static GetModuleHandleExW: (D.Def.int32 | string[])[];
    static GetProcessHeaps: (D.Def.uint32 | (D.Def.uint32 | D.Def.uint32PtrPtr | D.Def.uint64PtrPtr)[])[];
    /** https://learn.microsoft.com/zh-cn/windows/win32/api/libloaderapi/nf-libloaderapi-getprocaddress */
    static GetProcAddress: (string | string[])[];
    static GetSystemTimes: (D.Def.int32 | string[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-gettickcount */
    static GetTickCount: (D.Def.uint32 | never[])[];
    static HeapFree: (D.Def.int32 | (D.Def.uint32 | D.Def.uint64 | D.Def.voidPtr)[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibraryexw */
    static LoadLibraryExW: (D.Def.uint32 | D.Def.uint64 | string[])[];
    static OpenProcess: (D.Def.uint32 | D.Def.uint64 | (D.Def.int32 | D.Def.uint32)[])[];
    static OutputDebugStringW: (D.Def.void | D.Def.int16Ptr[])[];
    static SetLastError: (D.Def.void | D.Def.uint32[])[];
    static SetThreadExecutionState: (D.Def.int | D.Def.int[])[];
}

declare class Kernel32 implements T.LibDef2Type<typeof DefKernel32> {
    /**
     * https://learn.microsoft.com/zh-cn/windows/win32/api/winbase/nf-winbase-formatmessage?redirectedfrom=MSDN
     * dwLanguageId: https://msdn.microsoft.com/en-us/library/windows/desktop/dd318693(v=vs.85).aspx
     */
    FormatMessageW: (dwFlags: T.DWORD, lpSource: T.LPCVOID | null, dwMessageId: T.DWORD, dwLanguageId: T.DWORD, // 0x0409: US, 0x0000: Neutral locale language
    lpBuffer: T.LPTSTR, nSize: T.DWORD, Arguments: T.va_list | null) => T.DWORD;
    FreeConsole: () => T.BOOL;
    GenerateConsoleCtrlEvent: (dwCtrlEvent: T.DWORD, dwProcessGroupId: T.DWORD) => T.BOOL;
    GetLastError: () => T.DWORD;
    GetModuleHandleW: (lpModuleName: T.LPCTSTR | null) => T.HMODULE;
    GetModuleHandleExW: (dwFlags: T.DWORD, lpModuleName: T.LPCTSTR | null, phModule: Buffer) => T.BOOL;
    GetProcessHeaps: (NumberOfHeaps: T.DWORD, ProcessHeaps: T.PHANDLE) => T.DWORD;
    /** https://learn.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-getsystemtimes */
    GetSystemTimes: (lpIdleTime: S.FILETIME_Type, lpKernelTime: S.FILETIME_Type, lpUserTime: S.FILETIME_Type) => T.BOOL;
    /** https://learn.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-gettickcount */
    GetTickCount: () => T.DWORD;
    HeapFree: (hHeap: T.HANDLE, dwFlags: T.DWORD, lpMem: T.LPVOID | null) => T.BOOL;
    OpenProcess: (dwDesiredAccess: T.DWORD, bInheritHandle: T.BOOL, dwProcessId: T.DWORD) => T.HANDLE;
    /** https://learn.microsoft.com/zh-cn/windows/win32/api/libloaderapi/nf-libloaderapi-getprocaddress */
    GetProcAddress: (hModule: T.HMODULE, lpProcName: T.WString) => T.INT_PTR;
    /** https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibraryexw */
    LoadLibraryExW: (lpLibFileName: T.WString, hFile: T.HANDLE, dwFlags: T.DWORD) => T.HMODULE;
    /** https://learn.microsoft.com/en-us/windows/win32/api/debugapi/nf-debugapi-outputdebugstringw */
    OutputDebugStringW: (lpOutputString: T.LPCTSTR) => T.VOID;
    /** https://msdn.microsoft.com/en-us/library/windows/desktop/ms681381(v=vs.85).aspx */
    SetLastError: (dwErrCode: T.DWORD) => T.VOID;
    /**
     * Enables an application to inform the system that it is in use,
     * thereby preventing the system from entering sleep or turning off
     * the display while the application is running.
     *
     * @example
     * // Television recording is beginning. Enable away mode and prevent the sleep idle time-out.
     * SetThreadExecutionState(ES_CONTINUOUS | ES_SYSTEM_REQUIRED | ES_AWAYMODE_REQUIRED);
     *
     * // Clear EXECUTION_STATE flags to disable away mode and allow the system to idle to sleep normally.
     * SetThreadExecutionState(ES_CONTINUOUS);
     *
     * @param esFlags The thread's execution requirements.
     * This parameter can be one or more of the following values. Join them with single |
     * @returns If the function succeeds, the return value is the previous thread execution state.
     * If the function fails, the return value is NULL.
     * @see [Docs](https://learn.microsoft.com/en-us/windows/desktop/api/winbase/nf-winbase-setthreadexecutionstate)
     *
     */
    SetThreadExecutionState: (esFlags: T.UINT) => T.UINT;
}

declare const dllName$3 = DllNames.kernel32;
type LibKernel32 = FLib<Kernel32>;
declare const load$3: (fns?: LoadOptions["usedFuncNames"]) => FLib<Kernel32>;

type index$3_DefKernel32 = DefKernel32;
declare const index$3_DefKernel32: typeof DefKernel32;
type index$3_Kernel32 = Kernel32;
declare const index$3_Kernel32: typeof Kernel32;
type index$3_LibKernel32 = LibKernel32;
declare namespace index$3 {
  export { index$3_DefKernel32 as DefKernel32, index$3_Kernel32 as Kernel32, type index$3_LibKernel32 as LibKernel32, dllName$3 as dllName, load$3 as load };
}

declare class DefSpoolss implements T.LibDefBase {
    [x: string]: T.FnDefFullParams;
    static EndDocPrinter: (D.Def.int32 | (D.Def.uint32 | D.Def.uint64)[])[];
    static EndPagePrinter: (D.Def.int32 | (D.Def.uint32 | D.Def.uint64)[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/printdocs/writeprinter */
    static WritePrinter: (D.Def.int32 | string[])[];
}

declare class Spoolss implements T.LibDef2Type<typeof DefSpoolss> {
    /** https://learn.microsoft.com/en-us/windows/win32/printdocs/enddocprinter */
    EndDocPrinter: (hPrinter: T.HANDLE) => T.BOOL;
    EndPagePrinter: (hPrinter: T.HANDLE) => T.BOOL;
    /** https://learn.microsoft.com/zh-cn/windows/win32/printdocs/writeprinter */
    WritePrinter: (hPrinter: T.HANDLE, pBuf: T.LPVOID, cbBuf: T.DWORD, pcWritten: T.LPDWORD) => T.BOOL;
}

declare const dllName$2 = DllNames.spoolss;
type LibSpool = FLib<Spoolss>;
declare const load$2: (fns?: LoadOptions["usedFuncNames"]) => FLib<Spoolss>;

type index$2_DefSpoolss = DefSpoolss;
declare const index$2_DefSpoolss: typeof DefSpoolss;
type index$2_LibSpool = LibSpool;
type index$2_Spoolss = Spoolss;
declare const index$2_Spoolss: typeof Spoolss;
declare namespace index$2 {
  export { index$2_DefSpoolss as DefSpoolss, type index$2_LibSpool as LibSpool, index$2_Spoolss as Spoolss, dllName$2 as dllName, load$2 as load };
}

declare class DefUser32_B {
    static BringWindowToTop: (D.Def.int32 | (D.Def.uint32 | D.Def.uint64)[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-broadcastsystemmessage */
    static BroadcastSystemMessage: (D.Def.int32 | D.Def.int64 | (D.Def.int32 | D.Def.int64 | D.Def.uint | D.Def.uint32 | D.Def.uint64 | D.Def.uint16Ptr)[])[];
}

declare class DefUser32_C extends DefUser32_B {
    /** https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-callwindowprocw */
    static CallWindowProcW: (D.Def.int32 | D.Def.int64 | (D.Def.int32 | D.Def.int64 | D.Def.uint | D.Def.uint32 | D.Def.uint64 | D.Def.voidPtr)[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-changedisplaysettingsexw */
    static ChangeDisplaySettingsExW: (D.Def.long | string[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-clienttoscreen */
    static ClientToScreen: (D.Def.int32 | string[])[];
    static CloseWindow: (D.Def.int32 | (D.Def.uint32 | D.Def.uint64)[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createwindowexw */
    static CreateWindowExW: (D.Def.uint32 | D.Def.uint64 | string[])[];
}
declare class DefUser32_D extends DefUser32_C {
    static DefWindowProcW: (D.Def.int32 | D.Def.int64 | (D.Def.int32 | D.Def.int64 | D.Def.uint | D.Def.uint32 | D.Def.uint64)[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-destroywindow */
    static DestroyWindow: (D.Def.int32 | (D.Def.uint32 | D.Def.uint64)[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dispatchmessagew */
    static DispatchMessageW: (D.Def.int32 | D.Def.int64 | "MSG*"[])[];
}

declare class DefUser32_E extends DefUser32_D {
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumchildwindows */
    static EnumChildWindows: (D.Def.int32 | (D.Def.int32 | D.Def.int64 | D.Def.uint32 | D.Def.uint64 | D.Def.uint32Ptr | D.Def.uint64Ptr)[])[];
    /** https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-enumdisplaydevicesw */
    static EnumDisplayDevicesW: (D.Def.int32 | string[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumthreadwindows */
    static EnumThreadWindows: (D.Def.int32 | (D.Def.int32 | D.Def.int64 | D.Def.uint32 | D.Def.uint32Ptr | D.Def.uint64Ptr)[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumwindows */
    static EnumWindows: (D.Def.int32 | (D.Def.int32 | D.Def.int64 | D.Def.uint32Ptr | D.Def.uint64Ptr)[])[];
}
declare class DefUser32_F extends DefUser32_E {
    /** https=//learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-findwindowexw */
    static FindWindowExW: (D.Def.uint32 | D.Def.uint64 | (D.Def.uint32 | D.Def.uint64 | D.Def.int16Ptr)[])[];
    static FlashWindow: (D.Def.int32 | (D.Def.int32 | D.Def.uint32 | D.Def.uint64)[])[];
    static FlashWindowEx: (D.Def.int32 | "FLASHWINFO*"[])[];
}

declare class DefUser32_G extends DefUser32_F {
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getancestor */
    static GetAncestor: (D.Def.uint32 | D.Def.uint64 | (D.Def.uint | D.Def.uint32 | D.Def.uint64)[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getalttabinfow */
    static GetAltTabInfoW: (D.Def.int32 | string[])[];
    /**
     * Copies the caret's position to the specified POINT structure.
     * @link https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getcaretpos
     */
    static GetCaretPos: (D.Def.int32 | string[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclassinfoexw */
    static GetClassInfoExW: readonly [D.Def.int32, readonly [D.Def.uint32 | D.Def.uint64, readonly ["str16"], "_Out_ WNDCLASSEXW*"]];
    /** https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getclassnamew */
    static GetClassNameW: (D.Def.int | (D.Def.int | D.Def.uint32 | D.Def.uint64 | D.Def.uint16Ptr)[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getcursorpos */
    static GetCursorPos: (D.Def.int32 | string[])[];
    /** https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getclasslongptrw */
    static GetClassLongPtrW: (D.Def.int32 | D.Def.int64 | (D.Def.int | D.Def.uint32 | D.Def.uint64)[])[];
    static GetForegroundWindow: (D.Def.uint32 | D.Def.uint64 | never[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmessagew */
    static GetMessageW: (D.Def.int32 | string[])[];
    static GetParent: (D.Def.uint32 | D.Def.uint64 | (D.Def.uint32 | D.Def.uint64)[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdata */
    static GetRawInputData: (D.Def.uint | string[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdeviceinfow */
    static GetRawInputDeviceInfoW: (D.Def.uint | string[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdevicelist */
    static GetRawInputDeviceList: (D.Def.int | string[])[];
    static GetTopWindow: (D.Def.uint32 | D.Def.uint64 | (D.Def.uint32 | D.Def.uint64)[])[];
    static GetWindow: (D.Def.uint32 | D.Def.uint64 | (D.Def.uint | D.Def.uint32 | D.Def.uint64)[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowinfo */
    static GetWindowInfo: (D.Def.int32 | string[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowlongw */
    static GetWindowLongW: (D.Def.long | (D.Def.int | D.Def.uint32 | D.Def.uint64)[])[];
    /** only under x64 */
    static GetWindowLongPtrW: (D.Def.int32 | D.Def.int64 | (D.Def.int | D.Def.uint32 | D.Def.uint64)[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowrect */
    static GetWindowRect: (D.Def.int32 | string[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowtextw */
    static GetWindowTextW: (D.Def.int | (D.Def.int | D.Def.uint32 | D.Def.uint64 | D.Def.uint16Ptr)[])[];
    static GetWindowThreadProcessId: (D.Def.uint32 | (D.Def.uint32 | D.Def.uint64 | D.Def.uint16Ptr)[])[];
}

declare class DefUser32_I extends DefUser32_G {
    static IsIconic: (D.Def.int32 | (D.Def.uint32 | D.Def.uint64)[])[];
    static IsWindowVisible: (D.Def.int32 | (D.Def.uint32 | D.Def.uint64)[])[];
}
declare class DefUser32_M extends DefUser32_I {
    static MonitorFromWindow: (D.Def.uint32 | D.Def.uint64 | (D.Def.uint32 | D.Def.uint64)[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messageboxexw */
    static MessageBoxExW: (D.Def.int | string[])[];
}

declare class DefUser32_P extends DefUser32_M {
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-peekmessagew */
    static PeekMessageW: (D.Def.int32 | string[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-postmessagew */
    static PostMessageW: (D.Def.int32 | (D.Def.int32 | D.Def.int64 | D.Def.uint | D.Def.uint32 | D.Def.uint64)[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-printwindow */
    static PrintWindow: (D.Def.int32 | (D.Def.uint | D.Def.uint32 | D.Def.uint64)[])[];
}
declare class DefUser32_R extends DefUser32_P {
    /** https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-registerclassexw */
    static RegisterClassExW: (D.Def.uint16 | "WNDCLASSEXW*"[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerwindowmessagew */
    static RegisterWindowMessageW: (D.Def.uint | D.Def.int16Ptr[])[];
}

declare class DefUser32_S extends DefUser32_R {
    /**
     * @link https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendinput
     */
    static SendInput: (D.Def.uint | (D.Def.int | D.Def.uint | "INPUT*")[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendmessagew */
    static SendMessageW: (D.Def.int32 | D.Def.int64 | (D.Def.int32 | D.Def.int64 | D.Def.uint | D.Def.uint32 | D.Def.uint64)[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendmessagetimeoutw */
    static SendMessageTimeoutW: (D.Def.int32 | D.Def.int64 | (D.Def.int32 | D.Def.int64 | D.Def.uint | D.Def.uint32 | D.Def.uint64)[])[];
    static SetForegroundWindow: (D.Def.int32 | (D.Def.uint32 | D.Def.uint64)[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setparent */
    static SetParent: (D.Def.uint32 | D.Def.uint64 | (D.Def.uint32 | D.Def.uint64)[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowpos */
    static SetWindowPos: (D.Def.int32 | (D.Def.int | D.Def.uint | D.Def.uint32 | D.Def.uint64)[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowtextw */
    static SetWindowTextW: (D.Def.int32 | string[])[];
    static SetWinEventHook: (D.Def.uint32 | D.Def.uint64 | (D.Def.uint | D.Def.uint32 | D.Def.uint64 | D.Def.uint32Ptr | D.Def.uint64Ptr)[])[];
    static ShowWindow: (D.Def.int32 | (D.Def.int | D.Def.uint32 | D.Def.uint64)[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindowasync */
    static ShowWindowAsync: (D.Def.int32 | (D.Def.int | D.Def.uint32 | D.Def.uint64)[])[];
}

declare class DefUser32_T extends DefUser32_S {
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-translatemessage */
    static TranslateMessage: (D.Def.int32 | "MSG*"[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/winmsg/translatemessageex */
    static TranslateMessageEx: (D.Def.int32 | "MSG*"[])[];
}
declare class DefUser32_U extends DefUser32_T {
    static UnhookWinEvent: (D.Def.int32 | (D.Def.uint32 | D.Def.uint64)[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unregisterclassw */
    static UnregisterClassW: (D.Def.int32 | string[])[];
    static UpdateWindow: (D.Def.int32 | (D.Def.uint32 | D.Def.uint64)[])[];
}

declare class DefUser32 extends DefUser32_U implements T.LibDefBase {
    [x: string]: T.FnDefFullParams;
}

declare class User32_B implements T.LibDef2Type<typeof DefUser32_B> {
    BringWindowToTop: (hWnd: T.HWND) => T.BOOL;
    /**
     * https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-broadcastsystemmessage
     */
    BroadcastSystemMessage: (flags: T.DWORD, lpInfo: T.LPDWORD, Msg: T.UINT, wParam: T.WPARAM, lParam: T.LPARAM) => T.LRESULT;
}

declare class User32_C extends User32_B {
    /** https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-callwindowprocw */
    CallWindowProcW: (lpPrevWndFunc: T.WNDPROC, hWnd: T.HWND, Msg: T.UINT, wParam: T.WPARAM, lParam: T.LPARAM) => T.LRESULT;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-changedisplaysettingsexw */
    ChangeDisplaySettingsExW: (lpszDeviceName: T.WString, lpDevMode: S.DEVMODEW_Type, hWnd: T.HWND, dwFlags: T.DWORD, lpVoid: T.LPVOID) => T.LONG;
    ClientToScreen: (hWnd: T.HWND, lpPoint: S.POINT_Type) => T.BOOL;
    /** https://learn.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-closewindow */
    CloseWindow: (hWnd: T.HWND) => T.BOOL;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createwindowexw */
    CreateWindowExW: (dwExStyle: T.DWORD, lpClassName: T.LPCTSTR | null, lpWindowName: T.LPCTSTR | null, dwStyle: T.DWORD, x: T.INT, y: T.INT, nWidth: T.INT, nHeight: T.INT, hWndParent: T.HWND, HMENU: T.HMENU, HINSTANCE: T.HINSTANCE, LPVOID: T.LPVOID) => T.HWND;
}
declare class User32_D extends User32_C {
    DefWindowProcW: (hWnd: T.HWND, Msg: T.UINT, wParam: T.WPARAM, lParam: T.LPARAM) => T.LRESULT;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-destroywindow */
    DestroyWindow: (hWnd: T.HWND) => T.BOOL;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dispatchmessagew */
    DispatchMessageW: (lpMsg: S.MSG_Type) => T.LRESULT;
}

declare class User32_E extends User32_D {
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumchildwindows */
    EnumChildWindows: (hWndParent: T.HWND, lpEnumFunc: T.WNDENUMPROC, lParam: T.LPARAM) => T.BOOL;
    /** https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-enumdisplaydevicesw */
    EnumDisplayDevicesW: (lpDevice: T.LPCWSTR | null, iDevNum: T.DWORD, lpDisplayDevice: S.DISPLAY_DEVICEW_Type, dwFlags: T.DWORD) => T.BOOL;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumthreadwindows */
    EnumThreadWindows: (dwThreadId: T.DWORD, lpfn: T.WNDENUMPROC, lParam: T.LPARAM) => T.BOOL;
    /**
     * EnumWindows: EnumWindows
     * https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-enumwindows
     */
    EnumWindows: (lpEnumFunc: T.WNDENUMPROC, lParam: T.LPARAM) => T.BOOL;
}
declare class User32_F extends User32_E {
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-findwindowexw */
    FindWindowExW: (hwndParent: T.HWND, hwndChildAfter: T.HWND, lpszClass: T.LPCTSTR | null, lpszWindow: T.LPCTSTR | null) => T.HWND;
    FlashWindow: (hWnd: T.HWND, bInvert: T.BOOL) => T.BOOL;
    FlashWindowEx: (pfwi: S.FLASHWINFO_Type) => T.BOOL;
}

declare class User32_G extends User32_F {
    GetAncestor: (hwnd: T.HWND, gaFlags: T.UINT) => T.HWND;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getalttabinfow */
    GetAltTabInfoW: (hWnd: T.HWND, iItem: T.INT, pati: S.ALTTABINFO_Type, pszItemText: T.LPWSTR | null, cchItemText: T.INT) => T.BOOL;
    /**
     * Copies the caret's position to the specified POINT structure.
     * @link https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getcaretpos
     */
    GetCaretPos: (lpPoint: S.POINT_Type) => T.BOOL;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclassinfoexw */
    GetClassInfoExW: (hinst: T.HINSTANCE, lpszClass: T.LPCTSTR, LPWNDCLASSEX: S.WNDCLASSEXW_Type) => T.BOOL;
    /** https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getclassnamew */
    GetClassNameW: (hWnd: T.HWND, lpClassName: T.LPTSTR, nMaxCount: T.INT) => T.INT;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getcursorpos */
    GetCursorPos: (lpPoint: S.POINT_Type) => T.BOOL;
    /** https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getclasslongptrw */
    GetClassLongPtrW: (hWnd: T.HWND, nIndex: T.INT) => T.ULONG_PTR;
    GetForegroundWindow: () => T.HWND;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmessagew */
    GetMessageW: (lpMsg: S.MSG_Type, HWND: T.HWND, wMsgFilterMin: T.UINT, wMsgFilterMax: T.UINT) => T.BOOL;
    GetParent: (hWnd: T.HWND) => T.HWND;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdata */
    GetRawInputData: (hRawInput: S.RAWINPUT_Type, uiCommand: T.UINT, pData: T.LPVOID | null, pcbSize: T.PUINT, cbSizeHeader: T.UINT) => T.UINT;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdeviceinfow */
    GetRawInputDeviceInfoW: (hDevice: T.HANDLE, uiCommand: T.UINT, pData: T.LPVOID | null, pcbSize: T.PUINT) => T.UINT;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdevicelist */
    GetRawInputDeviceList: (
    /** An array of RAWINPUTDEVICELIST */
    pRawInputDeviceList: S.RAWINPUTDEVICELIST_Type | null, 
    /**
     * If this value is less than the number of devices attached to the system,
     * the function returns the actual number of devices in this variable
     * and fails with ERROR_INSUFFICIENT_BUFFER.
     */
    puiNumDevices: T.PUINT, cbSize: T.UINT) => T.INT;
    GetTopWindow: (hWnd: T.HWND) => T.HWND;
    GetWindow: (hWnd: T.HWND, uCmd: T.UINT) => T.HWND;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowinfo */
    GetWindowInfo: (hwnd: T.HWND, pwi: S.WINDOWINFO_Type) => T.BOOL;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowlongw */
    GetWindowLongW: (hWnd: T.HWND, nIndex: T.INT) => T.LONG;
    /** only under x64 */
    GetWindowLongPtrW: (hWnd: T.HWND, nIndex: T.INT) => T.LONG_PTR;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowrect */
    GetWindowRect: (hWnd: T.HWND, LPRECT: S.RECT_Type) => T.BOOL;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowtextw */
    GetWindowTextW: (hWnd: T.HWND, lpString: T.LPCTSTR, nMaxCount: T.INT) => T.INT;
    GetWindowThreadProcessId: (hWnd: T.HWND, lpdwProcessId: T.LPDWORD | null) => T.DWORD;
}

declare class User32_I extends User32_G {
    IsIconic: (hWnd: T.HWND) => T.BOOL;
    IsWindowVisible: (hWnd: T.HWND) => T.BOOL;
}
declare class User32_M extends User32_I {
    /**
     * @learn https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-monitorfromwindow
     */
    MonitorFromWindow: (hWnd: T.HWND, dwFlags: T.DWORD) => T.HMONITOR;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messageboxexw */
    MessageBoxExW: (hWnd: T.HWND, lpText: T.WString | null, lpCaption: T.WString | null, uType: T.UINT, wLanguageId: T.WORD) => T.INT;
}

declare class User32_P extends User32_M {
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-peekmessagew */
    PeekMessageW: (lpMsg: S.MSG_Type, HWND: T.HWND, wMsgFilterMin: T.UINT, wMsgFilterMax: T.UINT, wRemoveMsg: T.UINT) => T.BOOL;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-postmessagew */
    PostMessageW: (hWnd: T.HWND | null, Msg: T.UINT, wPARAM: T.WPARAM, lPARAM: T.LPARAM) => T.BOOL;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-printwindow */
    PrintWindow: (hwnd: T.HWND, hdcBlt: T.HDC, nFlags: T.UINT) => T.BOOL;
}
declare class User32_R extends User32_P {
    /** https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-registerclassexw */
    RegisterClassExW: (lpwcx: S.WNDCLASSEXW_Type) => T.ATOM;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerwindowmessagew */
    RegisterWindowMessageW: (lpString: T.LPCWSTR) => T.UINT;
}

declare class User32_S extends User32_R {
    /**
     * @link https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendinput
     */
    SendInput: (cInputs: T.UINT, pInputs: S.INPUT_Type[], cbSize: T.INT) => T.UINT;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendmessagew */
    SendMessageW: (hWnd: T.HWND, Msg: T.UINT, wPARAM: T.WPARAM, lPARAM: T.LPARAM) => T.LRESULT;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-sendmessagetimeoutw */
    SendMessageTimeoutW: (hWnd: T.HWND, Msg: T.UINT, wParam: T.WPARAM, lParam: T.LPARAM, fuFlags: T.UINT, uTimeout: T.UINT, lpdwResult: T.DWORD_PTR | null) => T.LRESULT;
    /** https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-setforegroundwindow */
    SetForegroundWindow: (hWnd: T.HWND) => T.BOOL;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setparent */
    SetParent: (hWndChild: T.HWND, hWndNewParent: T.HWND) => T.HWND;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowpos */
    SetWindowPos: (hWnd: T.HWND, hWndInsertAfter: T.HWND | null, X: T.INT, Y: T.INT, cx: T.INT, cy: T.INT, uFlags: T.UINT) => T.BOOL;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowtextw */
    SetWindowTextW: (hWnd: T.HWND, lpString: T.LPCWSTR | null) => T.BOOL;
    SetWinEventHook: (eventMin: T.UINT, eventMax: T.UINT, hmodWinEventProc: T.HMODULE, lpfnWinEventProc: T.WINEVENTPROC, idProcess: T.DWORD, idThread: T.DWORD, dwflags: T.UINT) => T.HWINEVENTHOOK;
    ShowWindow: (hWnd: T.HWND, nCmdShow: T.INT) => T.BOOL;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindowasync */
    ShowWindowAsync: (hWnd: T.HWND, nCmdShow: T.INT) => T.BOOL;
}

declare class User32_T extends User32_S {
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-translatemessage */
    TranslateMessage: (lpMsg: S.MSG_Type) => T.BOOL;
    /** https://learn.microsoft.com/en-us/windows/win32/winmsg/translatemessageex */
    TranslateMessageEx: (lpMsg: S.MSG_Type) => T.BOOL;
}
declare class User32_U extends User32_T {
    UnhookWinEvent: (hWinEventHook: T.HWINEVENTHOOK) => T.BOOL;
    /** https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unregisterclassw */
    UnregisterClassW: (lpClassName: T.LPCTSTR | T.ATOM, hInstance: T.HINSTANCE) => T.BOOL;
    UpdateWindow: (hWnd: T.HWND) => T.BOOL;
}

declare class User32Combo extends User32_U {
}

declare class User32 extends User32Combo implements T.LibDef2Type<typeof DefUser32> {
}

declare const dllName$1 = DllNames.user32;
type LibUser32 = FLib<User32>;
declare const load$1: (fns?: LoadOptions["usedFuncNames"]) => FLib<User32>;

type index$1_DefUser32 = DefUser32;
declare const index$1_DefUser32: typeof DefUser32;
type index$1_LibUser32 = LibUser32;
type index$1_User32 = User32;
declare const index$1_User32: typeof User32;
declare namespace index$1 {
  export { index$1_DefUser32 as DefUser32, type index$1_LibUser32 as LibUser32, index$1_User32 as User32, dllName$1 as dllName, load$1 as load };
}

declare class DefWinspool implements T.LibDefBase {
    [x: string]: T.FnDefFullParams;
    static ClosePrinter: (D.Def.int32 | (D.Def.uint32 | D.Def.uint64)[])[];
    static EndDocPrinter: (D.Def.int32 | (D.Def.uint32 | D.Def.uint64)[])[];
    static EndPagePrinter: (D.Def.int32 | (D.Def.uint32 | D.Def.uint64)[])[];
    /**
     * Enumerates available printers, print servers, domains, or print providers.
     * using multipleChoice to accept payload `pPrinterEnum` depends on `Level`
     * @link https://learn.microsoft.com/en-us/windows/win32/printdocs/enumprinters
     */
    static EnumPrintersW: (D.Def.int32 | string[])[];
    /**
     * Enumerates the print processors installed on the specified server.
     * @docs https://learn.microsoft.com/en-us/windows/win32/printdocs/enumprintprocessors
     */
    static EnumPrintProcessorsW: (D.Def.int32 | string[])[];
    /**
     * Enumerates the data types that a specified print processor supports.
     * @link https://learn.microsoft.com/en-us/windows/win32/printdocs/enumprintprocessordatatypes
     */
    static EnumPrintProcessorDatatypesW: (D.Def.int32 | string[])[];
    /** https://learn.microsoft.com/en-us/windows/win32/printdocs/getdefaultprinter */
    static GetDefaultPrinterW: (D.Def.int32 | string[])[];
    /**
     * Retrieves information about a specified print job
     * https://learn.microsoft.com/en-us/windows/win32/printdocs/getjob
     * @param pJob JOB_INFO_1 or a JOB_INFO_2
     */
    static GetJobW: (D.Def.int32 | string[])[];
    /**
     * Retrieves information about a specified printer.
     * @link https://learn.microsoft.com/en-us/windows/win32/printdocs/getprinter
     * @link https://learn.microsoft.com/zh-cn/windows/win32/printdocs/getprinter
     */
    static GetPrinterW: readonly [D.Def.int32, readonly [D.Def.uint32 | D.Def.uint64, D.Def.uint32, readonly ["_Out_ PRINTER_INFO_1*", "_Out_ PRINTER_INFO_4*", "_Out_ PRINTER_INFO_5*", "_Out_ PRINTER_INFO_6*", "_Out_ PRINTER_INFO_8*", "_Out_ PRINTER_INFO_9*"], D.Def.uint32, "_Out_ uint16_t*"]];
    /**
     * Retrieves a handle to the specified printer or print server or other types of handles in the print subsystem.
     * @docs https://learn.microsoft.com/en-us/windows/win32/printdocs/openprinter
     * @docs https://learn.microsoft.com/zh-cn/windows/win32/printdocs/openprinter
     */
    static OpenPrinterW: (D.Def.int32 | string[])[];
    /**
     * Notifies the print spooler that a document is to be spooled for printing.
     * @param pDocInfo A pointer to a DOC_INFO_1 structure that describes the document to print.
     * @link https://learn.microsoft.com/en-us/windows/win32/printdocs/startdocprinter
     */
    static StartDocPrinterW: (D.Def.uint32 | (D.Def.uint32 | D.Def.uint64 | "DOC_INFO_1*")[])[];
    /**
     * Notifies the spooler that a page is about to be printed on the specified printer.
     * @docs https://learn.microsoft.com/zh-cn/windows/win32/printdocs/startpageprinter
     */
    static StartPagePrinter: (D.Def.int32 | (D.Def.uint32 | D.Def.uint64)[])[];
    /**
     * Notifies the print spooler that data should be written to the specified printer.
     * @note Only supports GDI printing and must not be used for XPS printing
     * @link https://learn.microsoft.com/zh-cn/windows/win32/printdocs/writeprinter
     */
    static WritePrinter: (D.Def.int32 | string[])[];
}

declare class Winspool implements T.LibDef2Type<typeof DefWinspool> {
    /**
     * @docs https://docs.microsoft.com/en-us/windows/win32/printdocs/closeprinter
     */
    ClosePrinter: (hPrinter: T.HANDLE) => T.BOOL;
    /**
     * @docs https://docs.microsoft.com/en-us/windows/win32/printdocs/enddocprinter
     */
    EndDocPrinter: (hPrinter: T.HANDLE) => T.BOOL;
    EndPagePrinter: (hPrinter: T.HANDLE) => T.BOOL;
    /**
     * Enumerates available printers, print servers, domains, or print providers.
     * using `Level` to determine the type of `pPrinterEnum`
     * @link https://learn.microsoft.com/en-us/windows/win32/printdocs/enumprinters
     */
    EnumPrintersW: <Level extends S.EnumPrinters_Level>(Flags: T.DWORD, Name: T.WString, Level: Level, pPrinterEnum: T.LPBYTE, cbBuf: T.DWORD, pcbNeeded: T.LPDWORD, pcReturned: T.LPDWORD) => T.BOOL;
    /**
     * Enumerates available printers, print servers, domains, or print providers.
     * using `Level` to determine the type of `pPrinterEnum`
     * @link https://learn.microsoft.com/en-us/windows/win32/printdocs/enumprinters
     * @description Asynchronous version of EnumPrintersW only for generic type `Level`
     */
    EnumPrintersW_Async: <Level extends S.EnumPrinters_Level>(Flags: T.DWORD, Name: T.WString, Level: Level, pPrinterEnum: T.LPBYTE, cbBuf: T.DWORD, pcbNeeded: T.LPDWORD, pcReturned: T.LPDWORD) => Promise<T.BOOL>;
    /**
     * Enumerates the print processors installed on the specified server.
     * @docs https://learn.microsoft.com/en-us/windows/win32/printdocs/enumprintprocessors
     */
    EnumPrintProcessorsW: (pName: T.LPTSTR, pEnvironment: T.LPTSTR, Level: T.DWORD, pPrintProcessorInfo: T.LPBYTE, cbBuf: T.DWORD, pcbNeeded: T.LPDWORD, pcReturned: T.LPDWORD) => T.BOOL;
    /**
     * Enumerates the data types that a specified print processor supports.
     * @link https://learn.microsoft.com/en-us/windows/win32/printdocs/enumprintprocessordatatypes
     */
    EnumPrintProcessorDatatypesW: (pName: T.LPTSTR, pPrintProcessorName: T.LPTSTR, Level: T.DWORD, pDatatypes: T.LPBYTE, cbBuf: T.DWORD, pcbNeeded: T.LPDWORD, pcReturned: T.LPDWORD) => T.BOOL;
    /** https://learn.microsoft.com/en-us/windows/win32/printdocs/getdefaultprinter */
    GetDefaultPrinterW: (pszBuffer: T.LPTSTR, pcchBuffer: T.LPDWORD) => T.BOOL;
    /**
     * Retrieves information about a specified print job
     * @param pJob JOB_INFO_1 or a JOB_INFO_2
     * @docs https://learn.microsoft.com/en-us/windows/win32/printdocs/getjob
     */
    GetJobW: (Handler: T.HANDLE, JobId: T.DWORD, Level: T.DWORD, pJob: S.JOB_INFO_1_Type | T.LPBYTE, cbBuf: T.DWORD, pcbNeeded: T.LPDWORD) => T.BOOL;
    /**
     * Retrieves information about a specified printer.
     * @docs https://learn.microsoft.com/en-us/windows/win32/printdocs/getprinter
     * @docs https://learn.microsoft.com/zh-cn/windows/win32/printdocs/getprinter
     */
    GetPrinterW: <Level extends S.PRINTER_INFO_LEVEL>(hPrinter: T.HANDLE, Level: T.DWORD, pPrinter: S.PRINTER_INFO_X_Type<Level>, // multiple choice
    cbBuf: T.DWORD, pcbNeeded: T.LPDWORD) => T.BOOL;
    /**
     * Retrieves information about a specified printer.
     * @docs https://learn.microsoft.com/en-us/windows/win32/printdocs/getprinter
     * @docs https://learn.microsoft.com/zh-cn/windows/win32/printdocs/getprinter
     */
    GetPrinterW_Async: <Level extends S.PRINTER_INFO_LEVEL>(hPrinter: T.HANDLE, Level: T.DWORD, pPrinter: S.PRINTER_INFO_X_Type<Level>, // multiple choice
    cbBuf: T.DWORD, pcbNeeded: T.LPDWORD) => Promise<T.BOOL>;
    /**
     * Retrieves a handle to the specified printer or print server or other types of handles in the print subsystem.
     * @link https://leran.microsoft.com/en-us/windows/win32/printdocs/openprinter
     * @link https://leran.microsoft.com/zh-cn/windows/win32/printdocs/openprinter
     */
    OpenPrinterW: (pPrinterName: T.WString | null, phPrinter: T.LPHANDLE, pDefault: S.PRINTER_DEFAULTS_Type | null) => T.BOOL;
    /**
     * Notifies the print spooler that a document is to be spooled for printing.
     * @param pDocInfo A pointer to a DOC_INFO_1 structure that describes the document to print.
     * @link https://learn.microsoft.com/en-us/windows/win32/printdocs/startdocprinter
     */
    StartDocPrinterW: (hPrinter: T.HANDLE, Level: T.DWORD, pDocInfo: S.DOC_INFO_1_Type) => T.DWORD;
    /**
     * Notifies the spooler that a page is about to be printed on the specified printer.
     * @link https://learn.microsoft.com/zh-cn/windows/win32/printdocs/startpageprinter
     */
    StartPagePrinter: (hPrinter: T.HANDLE) => T.BOOL;
    /**
     * Notifies the print spooler that data should be written to the specified printer.
     * @note Only supports GDI printing and must not be used for XPS printing
     * @link https://learn.microsoft.com/zh-cn/windows/win32/printdocs/writeprinter
     */
    WritePrinter: (hPrinter: T.HANDLE, pBuf: T.LPVOID, cbBuf: T.DWORD, pcWritten: T.LPDWORD) => T.BOOL;
}

declare const dllName = DllNames.winspool;
type LibWinspool = FLib<Winspool>;
declare const load: (fns?: LoadOptions["usedFuncNames"]) => FLib<Winspool>;

type index_DefWinspool = DefWinspool;
declare const index_DefWinspool: typeof DefWinspool;
type index_LibWinspool = LibWinspool;
type index_Winspool = Winspool;
declare const index_Winspool: typeof Winspool;
declare const index_dllName: typeof dllName;
declare const index_load: typeof load;
declare namespace index {
  export { index_DefWinspool as DefWinspool, type index_LibWinspool as LibWinspool, index_Winspool as Winspool, index_dllName as dllName, index_load as load };
}

declare const enum DllNames {
    comctl32 = "comctl32",
    gdi32 = "gdi32",
    kernel32 = "kernel32",
    ntdll = "ntdll",
    spoolss = "spoolss",
    user32 = "user32",
    winspool = "winspool.drv"
}

declare const isArch64: boolean;

export { index$5 as Comctl32, DllNames, index$4 as Gdi32, index$3 as Kernel32, index$2 as Spoolss, index$1 as User32, index as Winspool, isArch64 };
